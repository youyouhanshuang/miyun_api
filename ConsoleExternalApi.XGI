<?php

include "ConDB.xgi";
include "LicenceInfo.xgi";
include "Lg.xgi";
include "Common.xgi";
include "Function.xgi";
include "converter.xgi";

$WWWRoot = $_SERVER['DOCUMENT_ROOT'];

$i = strlen($WWWRoot);
for (; 1 < $i; --$i) {
    if (!(substr($WWWRoot, $i - 1, 1) == "/")) {
        continue;
    }
    break;
}
$_SESSION['CASPath'] = substr($WWWRoot, 0, $i);
$GLOBALS['GLOBALS']['_SESSION']['CASPath'] = substr($WWWRoot, 0, $i);

$initparams = $_REQUEST['initParams'];
$key = $_REQUEST['key'];
$sign = $_REQUEST['sign'];
//testLog('kaitou1=' . $initparams);
if (stripos($initparams, "exePath_") > 1) {
    $paramArr = explode("__", $initparams);
//    testLog($paramArr);
    if ($paramArr) {
        $i = 0;
        for (; $i < sizeof($paramArr); $i++) {
//            testLog(stripos($paramArr[$i],"exePath_"));
            if (stripos($paramArr[$i], "_") > 1) {
                $paramArrTmp = explode("_", $paramArr[$i]);
//                testLog($paramArrTmp);
                if (in_array("exePath", $paramArrTmp)) {
//                    testLog('yuan1=' . $paramArrTmp[1]);
                    if (sizeof($paramArrTmp) > 1) {
                        $b = 0;
                        for (; $b < count($paramArrTmp); ++$b) {
                            if ($b > 0) {
                                $paramArrTmp[$b] = urlencode($paramArrTmp[$b]);
                            }
                        }
                    }
                    $paramArr[$i] = implode("_", $paramArrTmp);
//                    testLog("lianJie=" . $paramArr[$i] . '---yuan2=' . $paramArrTmp[1]);
                }


            }
        }

    }
//    testLog($paramArr);
    $initparams = implode("__", $paramArr);
//    testLog('kaitou2=' . $initparams);
}

if (!isset($initparams) || $initparams == "" || !isset($key) || $key == "" || !isset($sign) || $sign == "") {
    exitErrorJson('参数非法');
}
//testLog($initparams);
$COMCASWEB = new main();

if ($key == "wusuokey") {
    $keyVal = $COMCASWEB->getfarminfo($key);
} else if ($key == "inner") {
    $keyVal = "Realor";
}

if (!isset($keyVal) || empty($keyVal)) {
    write_log("{'参数非法':'key值为空'}");
    exitErrorJson('参数非法');
}
$signCalculate = md5($initparams . $keyVal);
//testLog("signCalculate=" . $signCalculate);
if ($signCalculate != $sign) {
    write_log("{'参数非法':'参数加密方法错误'}");
    exitErrorJson('参数非法');
}

$paramArr = explode("__", $initparams);
if (count($paramArr) == 0) {
    write_log("{'参数非法':'参数中未包含__'}");
    exitErrorJson('参数非法11');
}

$requestObj = null;
//testLog($paramArr);
foreach ($paramArr as $key => $value) {
    $keyValue = explode("_", $value);
    $requestObj[$keyValue[0]] = $keyValue[1];
}

$DSCon = creatconniction("DS");
if ($DSCon == -1) {
    write_log("{'连接错误':'数据库创建链接失败'}");
    exitErrorJson('创建数据库链接失败');
}

$cmd = $requestObj['command'];
$adminName = $requestObj['user'];
$adminName = utf8ToGbk($adminName);
$adminPwd = $requestObj['pwd'];
//testLog($requestObj);

if ($_REQUEST['encodeStr'] && $requestObj['exePath']) {
//    testLog($_REQUEST['encodeStr']);
//    testLog(hex2bin($_REQUEST['encodeStr']));
    ($requestObj['exePath'] = $requestObj['exePath'] . (hex2bin($_REQUEST['encodeStr'])));
}

//testLog($requestObj);
if ($cmd != "getLongXinClientList" || $cmd == "createUser" || $cmd == "importUsers" || $cmd == "editUser" || $cmd == "delUser" || $cmd == "delUserByUserIdOut" || $cmd == "publishApp" || $cmd == "editApp" || $cmd == "delApp" || $cmd == "deployAppToUser" || $cmd == "deployUserToApp") {
//    if(isadmin($adminName,$adminPwd)!=0)
//    {
//        write_log("{'参数非法':'管理员账户或密码错误'}");
//        exitErrorJson('管理员账号或密码错误');
//    }
} else if ($cmd == "getPhoneCode" || $cmd == "getCheckCode" || $cmd == "allocatedPointsToServer" || $cmd == "getServerPointAllocationInformationList" || $cmd == "getRegistrationInformation" || $cmd == "getServerSessionInfo" || $cmd == "getAppConversationLog" || $cmd == "getSameAppLists" || $cmd == "getClientDownLoadList" || $cmd == "judgeApplicationListWhetherEqual" || $cmd == "getApplicationListByServerIp" || $cmd = "getServerIpPort" || $cmd == "getServerIpList" || $cmd == "getAppPathLists" || $cmd != "getLongXinClientList" || $cmd == "getUserDetail" || $cmd == "getUserList" || $cmd == "getUserListByAppId" || $cmd == "getServerList" || $cmd == "getAlertPolicyList" || $cmd == "getAppList" || $cmd == "getApplication" || $cmd == "getAppIcon" || $cmd == "getServerPath" || $cmd == "getServerResourceInfo" || $cmd == "getUserResourceInfo" ||
        $cmd == "getDeployedApp" || $cmd == "getAppVisitLog" || $cmd == "getUserDetailByUserIdOut" || $cmd == "getUserDetailByAccount") {
    if (!isset($adminPwd) || empty($adminPwd)) {
        write_log("{'参数非法':'用户名密码不可为空'}");
        exitErrorJson('用户密码不可为空');
    }
    $result = mysql_query("select * from cuser where name='" . $adminName . "'" . " and pwd='" . $adminPwd . "'", $DSCon);
//    testLog("select * from cuser where name='" . $adminName . "'" . " and pwd='" . $adminPwd . "'");
    if (mysql_num_rows($result) < 1) {
        write_log("{'参数非法':'未查询到符合条件的用户'}");
        exitErrorJson('未查询到符合条件的用户');
    }
}

if ($cmd == "createUser") {
    $POST_JSON = json_decode($HTTP_RAW_POST_DATA, true);
    $fId = getDefaultVal($POST_JSON['userGroupId'], getAdminGroupId());
    $account = $POST_JSON['account'];

    if (!isset($account) || empty($account)) {
        write_log("{'createUser':'用户账户不可为空'}");
        exitErrorJson('用户账号不可为空');
    }
    $account = utf8ToGbk($account);

    $userPwd = $POST_JSON['userPwd'];
    if (!isset($userPwd) || empty($userPwd)) {
        write_log("{'createUser':'用户密码不可为空'}");
        exitErrorJson('用户密码不可为空');
    }
    //账号是否已存在
    $result = mysql_query("select * from cuser where name='" . $account . "'", $DSCon);

    if (mysql_num_rows($result) == 1) {
        write_log("{'createUser':'要添加的账户'.$account.'已存在'}");
        exitErrorJson('要添加的账户已存在！');
    }
    $fullName = getDefaultVal($POST_JSON['fullName'], "");
    $fullName = utf8ToGbk($fullName);

    $desc = getDefaultVal($POST_JSON['desc'], "");
    $desc = utf8ToGbk($desc);

    $userId = getglobalincLoop('usr');

    $loginPwd = "";
    $loginDomain = "";
    $ifAutoGenerateNtAccount = getDefaultVal($POST_JSON['ifAutoGenerateNtAccount'], 1);
    //自动生成
//    $startTime = explode(' ', microtime());
    if ($ifAutoGenerateNtAccount == 1) {
        $pwd = "GwT_" . RandomPasswd16();
        $serverUid = base64_encode(Crypt3("GWT" . $account, true));
        AddNtUserToAllServer($userId, "GWT" . $account, $pwd, "GWT" . $fullName, $desc);
        $base64Pwd = base64_encode(Crypt3($pwd, true));
        $COMPUTER_SERVER_IP = $_SERVER['SERVER_NAME'];

        $serverResult = mysql_query("select *  from server ", $DSCon);
        $j = 0;
        for (; $j < mysql_num_rows($serverResult); ++$j) {
            $serverRow = mysql_fetch_row($serverResult);
            $serverId = $serverRow[0];
            $computerName = $serverRow[2];
            if ($j == 0) {
                $loginDomain = base64_encode(Crypt3($computerName, true));
            }

            $result = mysql_query("select ip from serverip where ServerId='" . $serverId . "'", $DSCon);
            if (mysql_num_rows($result) < 1) {
                write_log("{'createUser':'未查询到符合条件的服务器信息'}");
                exitErrorJson('未查询到符合条件的服务器信息');
            }
            $rowServerIp = mysql_fetch_row($result);
            $ip = $rowServerIp[0];

            if ($COMPUTER_SERVER_IP == $ip) {
                $loginPwd = $base64Pwd;
            }
        }
    } //手动生成
    else {

    }
//    $endTime = explode(' ', microtime());
//    testLog($startTime[0] + $startTime[1]);
//    testLog($endTime[0] + $endTime[1]);
//    testLog('执行耗时：' . round($endTime[0] + $endTime[1] - ($startTime[0] + $startTime[1]), 4) . ' 秒。');

    $ifNeverExpires = getDefaultVal($POST_JSON['ifNeverExpires'], 1);
    if ($ifNeverExpires == 1 || $ifNeverExpires == "1") {
        $datelimittype = 2;
        $startdatetime = 0;
        $enddatetime = 0;
        $days = 0;
    } else {
        $datelimittype = 1;
        $startdatetime = date("Y-m-d", getDefaultVal($POST_JSON['startDatetime'], "0000-00-00"));
        $enddatetime = date("Y-m-d", getDefaultVal($POST_JSON['endDatetime'], "0000-00-00"));
        $days = getDefaultVal($POST_JSON['days'], 0);
    }

    $user_id = $userId;
    $FullName = $fullName;
    $pwd = $userPwd;
    $remark = $desc;
    $login_user = $serverUid;
    $login_pwd = $loginPwd;
    $login_domain = $loginDomain;

    $is_group = 0;
    $f_id = $fId;
    $is_admin = getDefaultVal($POST_JSON['isAdmin'], 0);
    $modify_pwd = getDefaultVal($POST_JSON['IfCanModifyPwdRemote'], 0);
    $enabled = getDefaultVal($POST_JSON['enable'], 1);
    $CanOpenClientFile = getDefaultVal($POST_JSON['ifSupportVirtualDiskPrivilege'], 1);
    $popedom = "";
    $createdatetime = date('Y-m-d h:i:s', time());

    $LastREPWDDate = 0;
    $RunAppNum = getDefaultVal($POST_JSON['runAppNum'], 0);
    $RepeatLoginEnable = getDefaultVal($POST_JSON['ifAllowMultipleClientLoginApp'], 0);
    $AuthType = '100000';
    $Audited = 1;
    //甲方user_id
    $user_id_out = getDefaultVal($POST_JSON['user_id_out'], "1");


//    $addUserSql = "insert cuser (user_id, name, is_group, is_admin,f_id ,pwd ,login_user ,login_pwd , login_domain,modify_pwd ,enabled , popedom, remark,createdatetime , datelimittype,startdatetime"
//        . ",enddatetime ,days , CanOpenClientFile,AuthType,LastREPWDDate ,RepeatLoginEnable ,RunAppNum,FullName,Audited) values ('" . $user_id . "', '"
//        . $account . "', " . $is_group . ", " . $is_admin . ", '" . $f_id . "', '" . $pwd . "', '" . $login_user . "', '" . $login_pwd . "', '" . $login_domain . "', " . $modify_pwd . ", " . $enabled . ", '" . $popedom . "', '" . $remark . "', '"
//        . $createdatetime . "', " . $datelimittype . ", '" . $startdatetime . "','" . $enddatetime . "', " . $days . ", " . $CanOpenClientFile . ",'100000', '" . $LastREPWDDate . "', "
//        . $RepeatLoginEnable . ", " . $RunAppNum . ", '" . $FullName . "', '" . $user_id_out . "');";
    $addUserSql = "insert cuser (user_id, name, is_group, is_admin,f_id ,pwd ,login_user ,login_pwd , login_domain,modify_pwd ,enabled , popedom, remark,createdatetime , datelimittype,startdatetime"
        . ",enddatetime ,days , CanOpenClientFile,AuthType,LastREPWDDate ,RepeatLoginEnable ,RunAppNum,FullName) values ('" . $user_id . "', '"
        . $account . "', " . $is_group . ", " . $is_admin . ", '" . $f_id . "', '" . $pwd . "', '" . $login_user . "', '" . $login_pwd . "', '" . $login_domain . "', " . $modify_pwd . ", " . $enabled . ", '" . $popedom . "', '" . $remark . "', '"
        . $createdatetime . "', " . $datelimittype . ", '" . $startdatetime . "','" . $enddatetime . "', " . $days . ", " . $CanOpenClientFile . ",'100000', '" . $LastREPWDDate . "', "
        . $RepeatLoginEnable . ", " . $RunAppNum . ", '" . $FullName . "');";

    $result = mysql_query($addUserSql, $DSCon);
    if (!$result) {
        write_log("{'createUser':'添加用户数据失败-addUserSql：'.$addUserSql}");
        exitErrorJson("添加用户数据失败");
    } else {
        //把用户分配给所有应用
//        $updateAllAppSql = "update application set droit_list = CONCAT(droit_list,'<" . $user_id . ">')";//公信创建用户，不分配应用
//        $result = mysql_query($updateAllAppSql, $DSCon);
//        if (!$result) {
//            write_log("{'createUser':'更新应用中用户列表失败-updateAllAppSql：'.$updateAllAppSql}");
//            exitErrorJson("更新应用中用户列表失败！");
//        }

        header('Content-Type:application/json; charset=utf-8');
        $data = array('result' => 1, 'userId' => $user_id);
        exit(json_encode($data));
    }
} else if ($cmd == "getAppPathLists") {
        exec('start software.exe software');
//    testLog(exec('start applist.exe applist'));
        $filePaths = $WWWRoot . "/software.txt";
        if (!file_exists($filePaths)) {
            write_log("{'getAppPathLists':'获取应用程序路径列表失败：'.$filePaths}");
            exitErrorJson("获取应用程序路径列表失败！");
        }
        $getAppListSql = "select * from application ";
//    testLog($getAppListSql);
        $result = mysql_query($getAppListSql, $DSCon);
        $rows = mysql_num_rows($result);
        $appListFromDb = array();
        $i = 0;
        for (; $i < $rows; ++$i) {
            $row = mysql_fetch_row($result);
//        $appArr = array();
//        $appArr['name'] = iconv("GBK", "UTF-8//IGNORE", $row['1']);
            if ($row['16'] == 0) {//获取cs程序
//            $appId = $row['0'];
//            $appArr['appId'] = $appId;
//            $appArr['name'] = iconv("GBK", "UTF-8//IGNORE", $row['1']);
//            $appArr['appPath'] = iconv("GBK", "UTF-8//IGNORE", $row['2']);
                $appListFromDb[$i] = str_replace("\\", "/", iconv("GBK", "UTF-8//IGNORE", $row['2']));
            }
            if ($row[0]) {
                $getServerIpListSql = "SELECT serverip.ip, server.WebPort, app_server.InstallFile,app_server.InstallPath FROM app_server,  serverip, server WHERE app_server.ServerId=serverip.ServerId AND serverip.ServerId=server.ServerID AND  app_server.AppId='" . $row[0] . "'";
//                testLog('getServerIpListSql='.$getServerIpListSql);
                $resultServerIp = mysql_query($getServerIpListSql, $DSCon);
                $rows_ServerIp = mysql_num_rows($resultServerIp);
                if ($rows_ServerIp > 0) {
//                testLog($rows_ServerIp);
                    $v = 0;
                    $ServerIpStr = "";
                    for (; $v < $rows_ServerIp; ++$v) {
                        $serverIpArr = mysql_fetch_row($resultServerIp);
                        if ($rows_ServerIp > 1) {
                            $ServerIpStr .= $serverIpArr[0] . ':' . $serverIpArr[1] . str_replace("\\", "/", $serverIpArr[2]) . ',';
                        } else {
                            $ServerIpStr = $serverIpArr[0] . ':' . $serverIpArr[1] . str_replace("\\", "/", $serverIpArr[2]);
                        }
                    }
                    if (strrpos($ServerIpStr, ',') > 1) {
                        $ServerIpStr = substr($ServerIpStr, 0, strlen($ServerIpStr) - 1);
                    }
                    $appListFromDb[$i] = $ServerIpStr;
                }
            }
        }
//    (ksort($appListArr));
        $appListFromDb = array_values($appListFromDb);
        $WWWRoot = $_SERVER['DOCUMENT_ROOT'];
        $greenFileName = $WWWRoot . '/appList/appList.txt';//绿色应用文件列表
        $position = strrpos($greenFileName, '/');
//    testLog($position);
        $path = substr($greenFileName, 0, $position);
//    testLog($path);
        if (!file_exists($greenFileName)) {
            mkdir($path, 0777, true);
            $openFile = fopen("appList/appList.txt", "a+");
            if ($openFile) {
                $content = $interfaceArr = parse_ini_file($WWWRoot . "/interface.ini", TRUE);
                (file_put_contents($greenFileName, var_export($content["About"]["pageTip"], true) . "\r\n", FILE_APPEND));
                fclose($openFile);
            } else {
                write_log("{'getAppPathLists':'Unable to open file!：'.$greenFileName}");
                exitErrorJson("Unable to open file $greenFileName!");
            }
//        fclose($openFile);
        }
        $greenArrLists = file($WWWRoot . '/appList/appList.txt');

        $file_arr = file($WWWRoot . "/software.txt");

        $file_arr = array_values(array_merge($file_arr, $greenArrLists));

        $temporaryFileArr = array();
        if (count($file_arr) > 0) {
            foreach ($file_arr AS $m => $val) {
                ($file_arr[$m] = str_replace("\r\n", "", $file_arr[$m]));
//            if (preg_match("/([\x81-\xfe][\x40-\xfe])/", $file_arr[$m], $match)){
////                testLog($file_arr[$m].'----yes');
//                unset($file_arr[$m]);
//            }
//            testLog('yes-'.$file_arr[$m] . '---' . file_exists(iconv("UTF-8", "GBK//IGNORE", $file_arr[$m])));
//            testLog('yes-' . $file_arr[$m] . '---' . file_exists($file_arr[$m]));
//            testLog('yes-'.$file_arr[$m] . '---' . file_exists($file_arr[$m]));
                if (file_exists($file_arr[$m])) {
//                testLog('yes-'.$file_arr[$m] . '---' . file_exists($file_arr[$m]));
//                unset($file_arr[$m]);
                    $temporaryFileArr[$m] = $file_arr[$m];
                }
                if (preg_match("/([\x81-\xfe][\x40-\xfe])/", $file_arr[$m], $match)) {
                    $file_arr[$m] = iconv("utf-8", "gbk//IGNORE", $file_arr[$m]);
                    if (file_exists($file_arr[$m])) {
                        $temporaryFileArr[$m] = $file_arr[$m];
                    }
                }
            }
        }
        $file_arr = $temporaryFileArr;
        $file_arr = array_values(array_unique($file_arr));
        $markPubSpeCharaArr = array();
        $i = 0;
        if (sizeof($file_arr) > 0) {
            for (; $i < count($file_arr); $i++) {
                $pieces = explode("\\", $file_arr[$i]);
                if (end($pieces)) {
                    $exeFilePieces = explode(".", end($pieces));
                    if (!in_array("Uninstall", $exeFilePieces) && in_array("exe", $exeFilePieces) && $exeFilePieces[0]) {


                        if (strstr(str_replace("\\", "/", $file_arr[$i]), "_") == false) {

//                        if ($pathListArr[$i]["app_path"] && sizeof($appListArr) > 0) {
                            $markPubSpeCharaArr[$i]["name"] = iconv("GBK", "UTF-8//IGNORE", $exeFilePieces[0]);
                            $markPubSpeCharaArr[$i]["app_path"] = str_replace("\\", "/", $file_arr[$i]);
                            if (count($appListFromDb) > 0) {
                                foreach ($appListFromDb AS $appListArrVal) {
                                    $appListArrPieces = explode(",", $appListArrVal);
                                    $HTTP_HOST = (count(explode(':', $_SERVER["HTTP_HOST"])) > 1 ? $_SERVER["HTTP_HOST"] : $_SERVER["HTTP_HOST"] . ':80');
//                                testLog("jinjinm-8888");
//                                testLog($HTTP_HOST . $markPubSpeCharaArr[$i]["app_path"]);
                                    $HTTP_HOST = (strstr($HTTP_HOST, "127.0.0.1") || strstr($HTTP_HOST, "127.0.0.2")) ? getfarminfofromdb("FarmWeb") : $HTTP_HOST;
//                                testLog($HTTP_HOST . $markPubSpeCharaArr[$i]["app_path"]);
//                                testLog($appListArrPieces);
//                                testLog(in_array($HTTP_HOST . $markPubSpeCharaArr[$i]["app_path"], $appListArrPieces));
//                                testLog("jinjinm-7777");
                                    if (count($appListArrPieces) > 0 && in_array($HTTP_HOST . $markPubSpeCharaArr[$i]["app_path"], $appListArrPieces)) {
                                        $markPubSpeCharaArr[$i]["flag"] = true;
                                        break;
//                                break;
                                    } else {
                                        $markPubSpeCharaArr[$i]["flag"] = false;
                                    }
                                }
                            } else {
                                $markPubSpeCharaArr[$i]["flag"] = false;
                            }
                        }
                    }
                }
            }
        }
        $pathListArr = array_values($markPubSpeCharaArr);
        if (sizeof($pathListArr) > 0) {
            $j = 0;
            for (; $j < count($pathListArr); $j++) {
                ($transcoding = iconv("GBK", "UTF-8//IGNORE", $pathListArr[$j]["app_path"]));
                if (preg_match("/([\x81-\xfe][\x40-\xfe])/", $transcoding, $match)) {
                    $pathListArr[$j]["app_path"] = $transcoding;
                }

                $initParamsTemp = "command_getAppIcon__user_" . $adminName . "__pwd_" . $adminPwd . "__exePath_" . urlencode($pathListArr[$j]['app_path']);
                $signTemp = md5($initParamsTemp . $keyVal);
                $ip = $_SERVER['HTTP_HOST'] ? $_SERVER['HTTP_HOST'] : gethostbyname($_ENV[COMPUTERNAME]);
                if ($ip == "127.0.0.1" || $ip == "127.0.0.2") {
                    $ip = getfarminfofromdb("FarmWeb");
                }
                $key = "wusuokey";
                $http_type = ((isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') || (isset($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO'] == 'https')) ? 'https://' : 'http://';
                $url = $http_type . $ip . "/ConsoleExternalApi.XGI?initParams=" . $initParamsTemp . "&key=" . $key . "&sign=" . $signTemp;

                $ch = curl_init();
                curl_setopt($ch, CURLOPT_URL, $url);
                curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($_FILES));
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
                $data = curl_exec($ch);
                curl_close($ch);
                if (isset($data) && !empty($data)) {
                    header('Content-Type:application/json; charset=utf-8');
                    $picturePath = json_decode($data, true);

                    if ($picturePath['result'] == '1' && sizeof($picturePath['icoList']) > 0) {

                        ($transcoding = iconv("GBK", "UTF-8//IGNORE", $pathListArr[$j]["app_path"]));
                        if (!preg_match("/([\x81-\xfe][\x40-\xfe])/", $transcoding, $match)) {
                            $pathListArr[$j]['app_path'] = base64_encode($pathListArr[$j]["app_path"]);
                        }
                        $pathListArr[$j]["icoico"] = $picturePath['icoList']['icoico'];
                        $pathListArr[$j]["bmp"] = $picturePath['icoList']['bmp'];
                        $pathListArr[$j]["ico"] = $picturePath['icoList']['ico'];
                        $pathListArr[$j]["y_ico"] = $picturePath['icoList']['y_ico'];
                    }
                }
            }
        }
        $pathListArr = array_values($pathListArr);
        if (!$pathListArr[0]['ico']) {
            write_log("{'getAppIcon':'⑴到控制台服务管理工具检查CASRapService.exe服务是否开启,⑵检查appList.txt有无数据,ico:'" . $pathListArr[0]['ico'] . "}");
            exitErrorJson('查询应用图标失败');
        } else {
            header('Content-Type:application/json; charset=utf-8');
            $data = array('result' => 1, 'pathListArr' => $pathListArr);
            $encodeStr = urldecode(json_encode($data));
            echo $encodeStr;
            exit;
        }
    }else if ($cmd == "getClientDownLoadList") {
    $hostIp = getfarminfofromdb("FarmWeb");
    $pFH = $WWWRoot . '/client/';
    $tmp = scandir($pFH);
//testLog($tmp);
    $serverIpTemp = getfarminfofromdb("LicenseServerURL") ? str_replace('http://', '', getfarminfofromdb("LicenseServerURL")) : gethostbyname($_ENV[COMPUTERNAME]);
    $getAppWebPortSql = "select server.WebPort from server,serverip where  server.ServerID=serverip.ServerId AND serverip.ip='" . $serverIpTemp . "'" . " OR serverip.ip='127.0.0.1'";
//    testLog($getAppWebPortSql);
//    if ($hostIp[1]) {
//        $getApplicationListSql .= " AND serverip.ip !='" . $hostIp[1] . "'";
//    }
//    testLog($getApplicationListSql);
    $http_type = ((isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') || (isset($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO'] == 'https')) ? 'https://' : 'http://';
    $result = mysql_query($getAppWebPortSql, $DSCon);
    $rows = mysql_num_rows($result);
    if ($rows < 1) {
        write_log("{'getAppWebPortSql':'未查询到符合条件的服务器IP、端口数据，getAppWebPortSql:'.$getAppWebPortSql}");
        exitErrorJson('未查询到符合条件的服务器IP、端口数据');
    }

    $WebPortStr = mysql_fetch_row($result);
    $lxListArr = array();
    $i = 0;
    for (; $i < count($tmp); $i++) {
//        testLog($tmp[$i]);
        $pieces = explode(".", $tmp[$i]);//apk

        //if ($pieces[0] && $pieces[1] && $pieces[2] && $pieces[1] . '.' . $pieces[2] == 'tar.gz') {
        if ($pieces[0] && $pieces[1] && $pieces[1] != 'apk' && $pieces[2] != 'zip') {
//            testLog($pieces[1]);
//            testLog($pieces[1].".".$pieces[2]);
            if ($pieces[1] == 'exe') {
                $lxListArr[$i]['windows']['clientName'] = $pieces[0];
                $lxListArr[$i]['windows']['clientDownAddress'] = $http_type . $hostIp . '/client/' . $pieces[0] . "." . $pieces[1];
            } elseif ($pieces[1] . '.' . $pieces[2] == 'tar.gz') {
//                testLog($tmp[$i]);
//            testLog($pieces[1] . '.' . $pieces[2]);
                $pieces1 = explode("_", $pieces[0]);
                //if (in_array("UOS", $pieces1)) {
//                testLog(in_array("UOS", $pieces1));
//            $lxListArr[$i]['clientName'] = $pieces[0];
                $lxListArr[$i]['linux']['clientName'] = $pieces[0];
                $lxListArr[$i]['linux']['clientDownAddress'] = $http_type . $hostIp . '/client/' . $pieces[0] . "." . $pieces[1] . '.' . $pieces[2];
                //}
            }
//
        }
    }
//    testLog($lxListArr);
    $lxListArr = array_values($lxListArr);
//    testLog($lxListArr);
    header('Content-Type:application/json; charset=utf-8');
    $data = array('result' => 1, 'lxList' => $lxListArr);
    $encodeStr = urldecode(json_encode($data));
    echo $encodeStr;
    exit;
} else if ($cmd == "getLongXinClientList") {
    $pFH = $WWWRoot . '/client/';
    $tmp = scandir($pFH);

    $lxListArr = array();
    $i = 0;
    for (; $i < count($tmp); $i++) {
//        testLog($tmp[$i]);
        $pieces = explode(".", $tmp[$i]);
//        testLog($pieces);
        if ($pieces[0] && $pieces[1] && $pieces[2] && $pieces[1] . '.' . $pieces[2] == 'tar.gz') {
//            testLog($pieces[1] . '.' . $pieces[2]);
            $pieces1 = explode("_", $pieces[0]);
            //if (in_array("UOS", $pieces1)) {
//                testLog(in_array("UOS", $pieces1));
            $lxListArr[$i]['clientName'] = $pieces[0];
            $lxListArr[$i]['clientDownAddress'] = 'client/' . $pieces[0] . "." . $pieces[1] . '.' . $pieces[2];
            //}
        }
    }
    $lxListArr = array_values($lxListArr);
    header('Content-Type:application/json; charset=utf-8');
    $data = array('result' => 1, 'lxList' => $lxListArr);
    $encodeStr = urldecode(json_encode($data));
    echo $encodeStr;
    exit;
} else if ($cmd == "importUsers") {
    $POST_JSON = json_decode($HTTP_RAW_POST_DATA, true);

    $importedUsers = $POST_JSON['users'];
    if (is_array($importedUsers)) {
        $errMsg = "";
        $successNum = 0;
        $failNum = 0;
        $failAccountStr = "";
        foreach ($importedUsers as $user) {
            $fId = getDefaultVal($user['userGroupId'], getAdminGroupId());
            $account = $user['account'];
            if (!isset($account) || empty($account)) {
                $errMsg = $errMsg . "用户" . $account . "添加失败：用户账号不可为空，";
                $failAccountStr = $failAccountStr . $account . ",";
                $failNum++;
                continue;
            }
            $account = utf8ToGbk($account);

            $userPwd = $user['userPwd'];
            if (!isset($userPwd) || empty($userPwd)) {
                $errMsg = $errMsg . "用户" . $account . "添加失败：用户密码不可为空，";
                $failAccountStr = $failAccountStr . $account . ",";
                $failNum++;
                continue;
            }

            //账号是否已存在,更新账户信息
            $result = mysql_query("select * from cuser where name='" . $account . "'", $DSCon);
            if (mysql_num_rows($result) >= 1) {
                $updateSql2 = "";
                $f_id = getDefaultVal($user['userGroupId'], getAdminGroupId());
                $updateSql2 .= "f_id='" . $f_id . "'";


                $pwd = getDefaultVal($user['userPwd'], 1);
                if ($pwd != 1) {
                    $updateSql2 .= ",pwd='" . $pwd . "'";
                }

                $FullName = getDefaultVal($user['fullName'], 1);
                if ($FullName != 1) {
                    $updateSql2 .= ",FullName='" . $FullName . "'";
                }

                $remark = getDefaultVal($user['desc'], 1);
                if ($remark != 1) {
                    $updateSql2 .= ",remark='" . $remark . "'";
                }

                //To-Do 电信五所这边不需要处理
                //自动生成NT账户 自动变成自动不需要修改；自动到手动，手动到自动，手动到手动（需要判断是否发生变化） ifAutoGenerateNtAccount
                $ifNeverExpires = getDefaultVal($user['ifNeverExpires'], 3);
                if ($ifNeverExpires != 3) {
                    if ($ifNeverExpires == 1) {
                        $updateSql2 .= ",datelimittype=2";
                        $updateSql2 .= ",startdatetime=0";
                        $updateSql2 .= ",enddatetime=0";
                        $updateSql2 .= ",days=0";
                    } else {
                        $datelimittype = 1;
                        $startdatetime = date("Y-m-d", getDefaultVal($user['startDatetime'], "0000-00-00"));
                        $enddatetime = date("Y-m-d", getDefaultVal($user['endDatetime'], "0000-00-00"));
                        $days = getDefaultVal($user['days'], 0);

                        $updateSql2 .= ",datelimittype=1";
                        $updateSql2 .= ",startdatetime='" . $startdatetime . "'";
                        $updateSql2 .= ",enddatetime='" . $enddatetime . "'";
                        $updateSql2 .= ",days=" . $days;
                    }
                }

                $is_admin = getDefaultVal($user['isAdmin'], "00");
                if ($is_admin != "00") {
                    $updateSql2 .= ",is_admin='" . $is_admin . "'";
                }

                $modify_pwd = getDefaultVal($user['IfCanModifyPwdRemote'], "00");
                if ($modify_pwd != "00") {
                    $updateSql2 .= ",modify_pwd='" . $modify_pwd . "'";
                }

                $enabled = getDefaultVal($user['enable'], "00");
                if ($enabled != "00") {
                    $updateSql2 .= ",enabled='" . $enabled . "'";
                }

                $CanOpenClientFile = getDefaultVal($user['ifSupportVirtualDiskPrivilege'], "00");
                if ($CanOpenClientFile != "00") {
                    $updateSql2 .= ",CanOpenClientFile='" . $CanOpenClientFile . "'";
                }

                $RunAppNum = getDefaultVal($user['runAppNum'], "00");
                if ($RunAppNum != "00") {
                    $updateSql2 .= ",RunAppNum='" . $RunAppNum . "'";
                }

                $RepeatLoginEnable = getDefaultVal($user['ifAllowMultipleClientLoginApp'], "00");
                if ($RepeatLoginEnable != "00") {
                    $updateSql2 .= ",RepeatLoginEnable='" . $RepeatLoginEnable . "'";
                }

                $updateUserSql = "update cuser set " . $updateSql2 . " where name='" . $account . "' and f_id = '" . $f_id . "'";
                $result = mysql_query($updateUserSql, $DSCon);
                if (!$result) {
                    $errMsg = $errMsg . "用户" . $account . "添加失败：编辑用户失败，";
                    $failAccountStr = $failAccountStr . $account . ",";
                    $failNum++;
                    continue;
                }

                $successNum++;
                continue;
            }

            $fullName = getDefaultVal($user['fullName'], "");
            $fullName = utf8ToGbk($fullName);
            $desc = getDefaultVal($user['desc'], "");
            $desc = utf8ToGbk($desc);

            $userId = getglobalincLoop('usr');

            $loginPwd = "";
            $loginDomain = "";
            $ifAutoGenerateNtAccount = getDefaultVal($user['ifAutoGenerateNtAccount'], 1);
            //自动生成
            if ($ifAutoGenerateNtAccount == 1) {
                $pwd = "GwT_" . RandomPasswd16();
                $serverUid = base64_encode(Crypt3("GWT" . $account, true));

                $addNtAccountResult = AddNtUserToAllServerImportUsers($userId, "GWT" . $account, $pwd, "GWT" . $fullName, $desc);
                if ($addNtAccountResult == -1) {
                    $errMsg = $errMsg . "用户" . $account . "添加失败：NT账户添加失败，";
                    $failAccountStr = $failAccountStr . $account . ",";
                    $failNum++;
                    continue;
                }

                $base64Pwd = base64_encode(Crypt3($pwd, true));
                $COMPUTER_SERVER_IP = $_SERVER['SERVER_NAME'];

                $serverResult = mysql_query("select *  from server ", $DSCon);
                $j = 0;
                for (; $j < mysql_num_rows($serverResult); ++$j) {
                    $serverRow = mysql_fetch_row($serverResult);
                    $serverId = $serverRow[0];
                    $computerName = $serverRow[2];
                    if ($j == 0) {
                        $loginDomain = base64_encode(Crypt3($computerName, true));
                    }

                    $result = mysql_query("select ip from serverip where ServerId='" . $serverId . "'", $DSCon);
                    if (mysql_num_rows($result) < 1) {
                        $errMsg = $errMsg . "用户" . $account . "添加失败：未查询到符合条件的服务器信息，";
                        $failAccountStr = $failAccountStr . $account . ",";
                        $failNum++;
                        continue;
                    }
                    $rowServerIp = mysql_fetch_row($result);
                    $ip = $rowServerIp[0];

                    if ($COMPUTER_SERVER_IP == $ip) {
                        $loginPwd = $base64Pwd;
                    }
                }
            } //手动生成
            else {

            }

            $ifNeverExpires = getDefaultVal($user['ifNeverExpires'], 1);
            if ($ifNeverExpires == 1 || $ifNeverExpires == "1") {
                $datelimittype = 2;
                $startdatetime = 0;
                $enddatetime = 0;
                $days = 0;
            } else {
                $datelimittype = 1;
                $startdatetime = date("Y-m-d", getDefaultVal($user['startDatetime'], "0000-00-00"));
                $enddatetime = date("Y-m-d", getDefaultVal($user['endDatetime'], "0000-00-00"));
                $days = getDefaultVal($user['days'], 0);
            }

            $user_id = $userId;
            $FullName = $fullName;
            $pwd = $userPwd;
            $remark = $desc;
            $login_user = $serverUid;
            $login_pwd = $loginPwd;
            $login_domain = $loginDomain;

            $is_group = 0;
            $f_id = $fId;
            $is_admin = getDefaultVal($user['isAdmin'], 0);
            $modify_pwd = getDefaultVal($user['IfCanModifyPwdRemote'], 1);
            $enabled = getDefaultVal($user['enable'], 1);
            $CanOpenClientFile = getDefaultVal($user['ifSupportVirtualDiskPrivilege'], 1);
            $popedom = "";
            $createdatetime = date('Y-m-d h:i:s', time());

            $LastREPWDDate = 0;
            $RunAppNum = getDefaultVal($user['runAppNum'], 0);
            $RepeatLoginEnable = getDefaultVal($user['ifAllowMultipleClientLoginApp'], 0);
            $AuthType = '100000';
            $Audited = 1;
            //甲方user_id
            $user_id_out = getDefaultVal($POST_JSON['user_id_out'], "");

            $addUserSql = "insert cuser (user_id, name, is_group, is_admin,f_id ,pwd ,login_user ,login_pwd , login_domain,modify_pwd ,enabled , popedom, remark,createdatetime , datelimittype,startdatetime"
                . ",enddatetime ,days , CanOpenClientFile,AuthType,LastREPWDDate ,RepeatLoginEnable ,RunAppNum,FullName,user_id_out) values ('" . $user_id . "', '"
                . $account . "', " . $is_group . ", " . $is_admin . ", '" . $f_id . "', '" . $pwd . "', '" . $login_user . "', '" . $login_pwd . "', '" . $login_domain . "', " . $modify_pwd . ", " . $enabled . ", '" . $popedom . "', '" . $remark . "', '"
                . $createdatetime . "', " . $datelimittype . ", '" . $startdatetime . "','" . $enddatetime . "', " . $days . ", " . $CanOpenClientFile . ",'100000', '" . $LastREPWDDate . "', "
                . $RepeatLoginEnable . ", " . $RunAppNum . ", '" . $FullName . "', '" . $user_id_out . "');";
            $result = mysql_query($addUserSql, $DSCon);
            if (!$result) {
                $errMsg = $errMsg . "用户" . $account . "添加失败：添加用户数据失败，";
                $failAccountStr = $failAccountStr . $account . ",";
                $failNum++;
                continue;
            }

            //把用户分配给所有应用
            $updateAllAppSql = "update application set droit_list = CONCAT(droit_list,'<" . $user_id . ">')";
            $result = mysql_query($updateAllAppSql, $DSCon);
            if (!$result) {
                write_log("{'importUsers':'更新用户" . $account . "到应用中失败-updateAllAppSql：'.$updateAllAppSql}");
                exitErrorJson("更新用户" . $account . "到应用中失败！");
            }

            $successNum++;
        }

        if (empty($errMsg)) {
            header('Content-Type:application/json; charset=utf-8');
            $totalNum = $successNum + $failNum;
            $data = array('result' => 1, 'totalNum' => $totalNum, 'totalSuccessNum' => $successNum);
            exit(json_encode($data));
        } else {
            if ($successNum > 0) {
                header('Content-Type:application/json; charset=utf-8');
                $totalNum = $successNum + $failNum;
                $failAccountStr = substr($failAccountStr, 0, strlen($failAccountStr) - 2);
                $errMsg = substr($errMsg, 0, strlen($errMsg) - 2);
                $data = array('result' => 1, 'totalNum' => $totalNum, 'totalSuccessNum' => $successNum, 'failAccountStr' => urlencode($failAccountStr), 'msg' => urlencode($errMsg));
                $encodeStr = urldecode(json_encode($data));
                echo $encodeStr;
                exit;
            } else {
                $errMsg = substr($errMsg, 0, strlen($errMsg) - 2);
                write_log("{'importUsers':$errMsg}");
                exitErrorJson('全部导入失败：' . $errMsg);
            }
        }
    } else {
        write_log("{'importUsers-参数非法':'导入用户为空'}");
        exitErrorJson('参数非法');
    }
} else if ($cmd == "getUserDetail") {
    $userId = $requestObj['userId'];
    if (!isset($userId) || empty($userId)) {
        write_log("{'getUserDetail-参数非法':'用户ID不可为空'}");
        exitErrorJson('用户ID不可为空');
    }
    $result = mysql_query("select * from cuser where user_Id='" . $userId . "'", $DSCon);
    if (mysql_num_rows($result) < 1) {
        write_log("{'getUserDetail-参数非法':'未查询到符合条件的用户,userId:'.$userId}");
        exitErrorJson('未查询到符合条件的用户');
    }
    $row = mysql_fetch_row($result);

    header('Content-Type:application/json; charset=utf-8');
    $userArr = array();
    $userArr['userId'] = $row['0'];
    $userArr['userIdOut'] = $row['31'];
    $userArr['account'] = gbkToUtf8Encode($row['1']);
    $userArr['fullName'] = gbkToUtf8Encode($row['30']);
    $userArr['desc'] = gbkToUtf8Encode($row['12']);

    $data = array('result' => 1, 'user' => $userArr);
    echo urldecode(json_encode($data));
    exit;
} else if ($cmd == "getUserDetailByUserIdOut") {
    $userIdOut = $requestObj['userIdOut'];
    if (!isset($userIdOut) || empty($userIdOut)) {
        write_log("{'getUserDetailByUserIdOut-参数非法':'用户ID不可为空,userIdOut:'.$userIdOut}");
        exitErrorJson('用户ID不可为空');
    }
    $result = mysql_query("select * from cuser where user_id_out='" . $userIdOut . "'", $DSCon);
    if (mysql_num_rows($result) < 1) {
        write_log("{'getUserDetailByUserIdOut-参数非法':'未查询到符合条件的用户,userIdOut:'.$userIdOut}");
        exitErrorJson('未查询到符合条件的用户');
    }
    $row = mysql_fetch_row($result);

    header('Content-Type:application/json; charset=utf-8');
    $userArr = array();
    $userArr['userId'] = $row['0'];
    $userArr['userIdOut'] = $row['31'];
    $userArr['account'] = gbkToUtf8Encode($row['1']);
    $userArr['fullName'] = gbkToUtf8Encode($row['30']);
    $userArr['desc'] = gbkToUtf8Encode($row['12']);
    $userArr['userPwd'] = gbkToUtf8Encode($row['5']);

    $data = array('result' => 1, 'user' => $userArr);
    echo urldecode(json_encode($data));
    exit;
} else if ($cmd == "getUserDetailByAccount") {
    $account = $requestObj['account'];
    $account = utf8ToGbk($account);
    if (!isset($account) || empty($account)) {
        write_log("{'getUserDetailByAccount-参数非法':'用户账户不可为空,account:'.$account}");
        exitErrorJson('用户账户不可为空');
    }
    $result = mysql_query("select * from cuser where name='" . $account . "'", $DSCon);
    if (mysql_num_rows($result) < 1) {
        write_log("{'getUserDetailByAccount-参数非法':'未查询到符合条件的用户,account:'.$account}");
        exitErrorJson('未查询到符合条件的用户');
    }
    $row = mysql_fetch_row($result);

    header('Content-Type:application/json; charset=utf-8');
    $userArr = array();
    $userArr['userId'] = $row['0'];
    $userArr['userIdOut'] = $row['31'];
    $userArr['account'] = gbkToUtf8Encode($row['1']);
    $userArr['fullName'] = gbkToUtf8Encode($row['30']);
    $userArr['desc'] = gbkToUtf8Encode($row['12']);
    $userArr['userPwd'] = gbkToUtf8Encode($row['5']);

    $data = array('result' => 1, 'user' => $userArr);
    echo urldecode(json_encode($data));
    exit;
} else if ($cmd == "editUser") {
    $userId = $requestObj['userId'];
    if (!isset($userId) || empty($userId)) {
        write_log("{'editUser-参数非法':'用户ID不可为空,userId:'.$userId}");
        exitErrorJson('用户ID不可为空');
    }

    $result = mysql_query("select * from cuser where user_Id='" . $userId . "'", $DSCon);
    if (mysql_num_rows($result) < 1) {
        write_log("{'editUser-参数非法':'userId对应的用户不存在,userId:'.$userId}");
        exitErrorJson('userId对应的用户不存在');
    }

    $POST_JSON = json_decode($HTTP_RAW_POST_DATA, true);

    $updateSql2 = "";
    $f_id = getDefaultVal($POST_JSON['userGroupId'], getAdminGroupId());
    $updateSql2 .= "f_id='" . $f_id . "'";

    $account = getDefaultVal($POST_JSON['account'], "00");

    if ($account != "00") {
        //账号是否已存在
        $result = mysql_query("select * from cuser where name='" . $account . "' OR user_id='" . $userId . "'", $DSCon);
        if (mysql_num_rows($result) > 1) {
            write_log("{'editUser-参数非法':'要添加的账户已存在,userId:'.$userId}");
            exitErrorJson('要添加的账户已存在！');
        }

        $account = utf8ToGbk($account);
        $updateSql2 .= ",name='" . $account . "'";
    }

    $pwd = getDefaultVal($POST_JSON['userPwd'], 1);
    if ($pwd != 1) {
        $updateSql2 .= ",pwd='" . $pwd . "'";
    }

    $FullName = getDefaultVal($POST_JSON['fullName'], "");
    if ($FullName != 1) {
        $FullName = utf8ToGbk($FullName);
        $updateSql2 .= ",FullName='" . $FullName . "'";
    }

    $remark = getDefaultVal($POST_JSON['desc'], 1);
    if ($remark != 1) {
        $remark = utf8ToGbk($remark);
        $updateSql2 .= ",remark='" . $remark . "'";
    }

    //To-Do 电信五所这边不需要处理
    //自动生成NT账户 自动变成自动不需要修改；自动到手动，手动到自动，手动到手动（需要判断是否发生变化） ifAutoGenerateNtAccount
    $ifNeverExpires = getDefaultVal($POST_JSON['ifNeverExpires'], 3);
    if ($ifNeverExpires != 3) {
        if ($ifNeverExpires == 1) {
            $updateSql2 .= ",datelimittype=2";
            $updateSql2 .= ",startdatetime=0";
            $updateSql2 .= ",enddatetime=0";
            $updateSql2 .= ",days=0";
        } else {
            $datelimittype = 1;
            $startdatetime = date("Y-m-d", getDefaultVal($POST_JSON['startDatetime'], "0000-00-00"));
            $enddatetime = date("Y-m-d", getDefaultVal($POST_JSON['endDatetime'], "0000-00-00"));
            $days = getDefaultVal($POST_JSON['days'], 0);

            $updateSql2 .= ",datelimittype=1";
            $updateSql2 .= ",startdatetime='" . $startdatetime . "'";
            $updateSql2 .= ",enddatetime='" . $enddatetime . "'";
            $updateSql2 .= ",days=" . $days;
        }
    }

    $is_admin = getDefaultVal($POST_JSON['isAdmin'], "00");
    if ($is_admin != "00") {
        $updateSql2 .= ",is_admin='" . $is_admin . "'";
    }

    $modify_pwd = getDefaultVal($POST_JSON['IfCanModifyPwdRemote'], "00");
    if ($modify_pwd != "00") {
        $updateSql2 .= ",modify_pwd='" . $modify_pwd . "'";
    }

    $enabled = getDefaultVal($POST_JSON['enable'], "00");
    if ($enabled != "00") {
        $updateSql2 .= ",enabled='" . $enabled . "'";
    }

    $CanOpenClientFile = getDefaultVal($POST_JSON['ifSupportVirtualDiskPrivilege'], "00");
    if ($CanOpenClientFile != "00") {
        $updateSql2 .= ",CanOpenClientFile='" . $CanOpenClientFile . "'";
    }

    $RunAppNum = getDefaultVal($POST_JSON['runAppNum'], "00");
    if ($RunAppNum != "00") {
        $updateSql2 .= ",RunAppNum='" . $RunAppNum . "'";
    }

    $RepeatLoginEnable = getDefaultVal($POST_JSON['ifAllowMultipleClientLoginApp'], "00");
    if ($RepeatLoginEnable != "00") {
        $updateSql2 .= ",RepeatLoginEnable='" . $RepeatLoginEnable . "'";
    }

    $user_id_out = getDefaultVal($POST_JSON['user_id_out'], "00");
    if ($RepeatLoginEnable != "00") {
        $updateSql2 .= ",user_id_out='" . $user_id_out . "'";
    }

    $updateUserSql = "update cuser set " . $updateSql2 . " where user_id='" . $userId . "'";

    $result = mysql_query($updateUserSql, $DSCon);
    if (!$result) {
        write_log("{'editUser':'编辑用户失败-updateUserSql:'.$updateUserSql}");
        exitErrorJson("编辑用户失败！");
    } else {
        header('Content-Type:application/json; charset=utf-8');
        $data = array('result' => 1, 'msg' => urlencode("编辑用户成功"));
        $encodeStr = urldecode(json_encode($data));
        echo $encodeStr;
        exit;
    }
} else if ($cmd == "getAppConversationLog") {
    $accountStr = getDefaultVal($requestObj['accountStr'], "");
    $pageNo = $requestObj['pageNo'];
    $pageSize = $requestObj['pageSize'];
    $likeStr = " where 1=1 ";
    if (!empty($accountStr)) {
        $user_Id = getUserId_UserName_Info($accountStr, "");
        $likeStr = $likeStr . " AND UserID= '" . ($user_Id) . "'";
    }
    $LogCon = creatconniction("Log");
    if ($LogCon == -1) {
        write_log("{'getAppConversationLog':'Log创建数据库链接失败'}");
        exitErrorJson('创建数据库链接失败');
    }
    $appNameStr = getDefaultVal($requestObj['appNameStr'], "");
    if (!empty($appNameStr)) {
        $likeStr = $likeStr . " AND appshowname like '%" . utf8ToGbk($appNameStr) . "%'";
    }

    $time = getDefaultVal($requestObj['time'], "");

    if ($time == "day") {
        $likeStr = $likeStr . " AND TO_DAYS( NOW( ) ) - TO_DAYS(Time) <1";
    } else if ($time == "week") {
//        $likeStr = $likeStr . " AND DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(Time)";//这是7天的数据(由当前时间向前数7天，不一定是从本周一开始算)
        $likeStr = $likeStr . " AND YEARWEEK(date_format(Time,'%Y-%m-%d')) = YEARWEEK(NOW())";
    } else if ($time == "month") {
        $likeStr = $likeStr . " AND DATE_SUB(CURDATE(), INTERVAL 1 MONTH) <= date(Time)";
    } else if ($time == "custom") {
        $startTime = getDefaultVal($requestObj['startTime'], "");
        $endTime = getDefaultVal($requestObj['endTime'], "");
        if ($startTime == "") {
            write_log("{'getAppConversationLog':'开始时间不可为空，startTime:'.$startTime}");
            exitErrorJson('开始时间不可为空');
        }
        if ($endTime == "") {
            write_log("{'getAppConversationLog':'结束时间不可为空，endTime:'.$endTime}");
            exitErrorJson('结束时间不可为空');
        }

        $startTime = substr_replace($startTime, " ", 10, 0);
        $endTime = substr_replace($endTime, " ", 10, 0);

        $likeStr = $likeStr . " AND  unix_timestamp(Time)>=unix_timestamp('{$startTime}') AND unix_timestamp(Time)<=unix_timestamp('{$endTime}')";
    }

    //计算实际总记录数量
    $resultTotal = mysql_query("SELECT count(0) as totalSize FROM sessionlog2 " . $likeStr, $DSCon);

    $rowTotal = mysql_fetch_row($resultTotal);
    $totalSize = $rowTotal[0];

    $getAppLogListSql = "SELECT * FROM sessionlog2 " . $likeStr;

    $pageNo = getDefaultVal($requestObj['pageNo'], 1);
    if (!is_numeric($pageNo)) {
        $pageNo = 1;
    }
    $pageSize = getDefaultVal($requestObj['pageSize'], 20);
    if (!is_numeric($pageSize)) {
        $pageSize = 20;
    }
    $totalPage = ceil($totalSize / $pageSize);
    if ($pageNo > $totalPage) {
        $pageNo = $totalPage == 0 ? 1 : $totalPage;
    }

    $start = ($pageNo - 1) * $pageSize;

    $getAppLogListSql = $getAppLogListSql . "  ORDER BY DATE(Time) DESC, HOUR(Time) DESC, MINUTE(Time) ASC, SECOND(Time) DESC, WinSessionID ASC limit " . $start . "," . $pageSize;
//testLog($getAppLogListSql);
    $result = mysql_query($getAppLogListSql, $LogCon);
    $rows = mysql_num_rows($result);
    if ($rows < 1) {
        write_log("{'getAppConversationLog':'未查询到符合条件的日志，getAppLogListSql:'.$getAppLogListSql}");
        exitErrorJson('未查询到符合条件的日志');
    }

    $logListArr = array();
    $eventDescription = array('1' => "连接", '2' => "登录", "3" => "断开", "4" => '', '5' => "注销", "6" => '', "7" => '', "8" => '', "9" => '', "10" => "启动应用", "11" => "结束应用");
    $i = 0;
    for (; $i < $rows; ++$i) {
        $row = mysql_fetch_row($result);
        $logArr = array();
        $logArr['sessionID'] = $row['7'];
        $logArr['time'] = $row['1'];
        $account = getUserId_UserName_Info('', $row['2']);
        $logArr['account'] = gbkToUtf8Encode($account);
        $logArr['clientName'] = gbkToUtf8Encode($row['4']);
        $logArr['clientFingerPrint'] = ($row['9']);
        $logArr['clientAddress'] = $row['11'];
        if ($row['5']) {
            foreach ($eventDescription AS $k => $v) {
                if (intval($row['5']) == intval($k)) {
                    ($logArr['eventType'] = gbkToUtf8Encode($v));
                    break;
                }
            }
        }
        $logArr['eventDescription'] = gbkToUtf8Encode($row['6']);
        $logArr['globalSessionID'] = gbkToUtf8Encode($row['8']);
        $logListArr[$i] = $logArr;
    }
//    testLog(count($logListArr));
//    testLog($logListArr);
//    $row = mysql_fetch_row($result);
    header('Content-Type:application/json; charset=utf-8');
    $data = array('result' => 1, 'logList' => $logListArr);
    $encodeStr = urldecode(json_encode($data));
    echo $encodeStr;
    exit;
} else if ($cmd == "delUser") {
    $userId = $requestObj['userId'];
    $userName = $requestObj['user'];
    if (!isset($userName) || empty($userName)) {
        write_log("{'delUser-参数非法':'用户Name不可为空，userName:'.$userName}");
        exitErrorJson('用户Name不可为空');
    }

//    $result = mysql_query( "delete from cuser where user_Id='".$userId."'", $DSCon );
    $result = mysql_query("delete from cuser where name='" . $userName . "'", $DSCon);
//    testLog($result);
//    testLog(mysql_affected_rows($DSCon));
    if (mysql_affected_rows($DSCon) == 0) {
        write_log("{'delUser-参数非法':'删除用户失败，userId:'.$userId}");
        exitErrorJson("删除用户失败");
    } else {
        header('Content-Type:application/json; charset=utf-8');
        $data = array('result' => 1, 'msg' => urlencode("删除用户成功"));
        $encodeStr = urldecode(json_encode($data));
        echo $encodeStr;
        exit;
    }
} else if ($cmd == "delUserByUserIdOut") {
    $userIdOut = $requestObj['userIdOut'];
    if (!isset($userIdOut) || empty($userIdOut)) {
        write_log("{'delUserByUserIdOut-参数非法':'用户ID不可为空，userIdOut:'.$userIdOut}");
        exitErrorJson('用户ID不可为空');
    }

    $result = mysql_query("delete from cuser where user_id_out='" . $userIdOut . "'", $DSCon);
    if (!$result) {
        write_log("{'delUserByUserIdOut-参数非法':'删除用户失败，userIdOut:'.$userIdOut}");
        exitErrorJson("删除用户失败");
    } else {
        header('Content-Type:application/json; charset=utf-8');
        $data = array('result' => 1, 'msg' => urlencode("删除用户成功"));
        $encodeStr = urldecode(json_encode($data));
        echo $encodeStr;
        exit;
    }
} else if ($cmd == "getUserList") {
    $pageNo = $requestObj['pageNo'];
    $pageSize = $requestObj['pageSize'];

    $accountStr = getDefaultVal($requestObj['accountStr'], "");
    $likeStr = "";
    if (!empty($accountStr)) {
        $likeStr = $likeStr . " and name like '%" . utf8ToGbk($accountStr) . "%'";
    }

    //计算实际总记录数量
    $resultTotal = mysql_query("SELECT count(0) AS totalSize FROM cuser WHERE name !='Admin' AND is_group=0 " . $likeStr, $DSCon);

    $rowTotal = mysql_fetch_row($resultTotal);
    $totalSize = $rowTotal[0];

    $getUserListSql = "SELECT * FROM cuser WHERE name !='Admin' AND is_group=0 " . $likeStr;

    $pageNo = getDefaultVal($requestObj['pageNo'], 1);
    $pageSize = getDefaultVal($requestObj['pageSize'], 20);
    $totalPage = ceil($totalSize / $pageSize);
    if ($pageNo > $totalPage) {
        $pageNo = $totalPage;
    }
    $start = ($pageNo - 1) * $pageSize;
    $getUserListSql = $getUserListSql . "limit " . $start . "," . $pageSize;

    $result = mysql_query($getUserListSql, $DSCon);
    $rows = mysql_num_rows($result);
    if ($rows < 1) {
        write_log("{'getUserList':'未查询到符合条件的用户，getUserListSql:'.$getUserListSql}");
        exitErrorJson('未查询到符合条件的用户');
    }

    $userListArr = array();
    $i = 0;
    for (; $i < $rows; ++$i) {
        $row = mysql_fetch_row($result);
        $userArr = array();
        $userArr['id'] = $row['0'];
        $userArr['pId'] = "001";
        $userArr['name'] = gbkToUtf8Encode($row['1']);
//        $userArr['open'] = true;
//        $userArr['isParent'] = true;
//        $userArr['isAdmin'] = $row['3'];
//        $userArr['fullName'] = gbkToUtf8Encode($row['30']);
//        $userArr['desc'] = gbkToUtf8Encode($row['12']);
        $userListArr[$i] = $userArr;
    }
    $newArr = array("id" => "001", "pId" => "00000000", "name" => "所有用户", "open" => true, "isParent" => true);
    array_unshift($userListArr, $newArr);
//    $row = mysql_fetch_row($result);
//    $arr = array();
//    foreach ($userListArr AS $k => $v) {
//        $arr[$k]['value'] = $k;
//        $arr[$k]['userId'] = $v['userId'];
//        $arr[$k]['name'] = $v['name'];
//        $arr[$k]['active'] = false;
//        $arr[$k]['last'] = true;
//        $arr[$k]['img'] = "";
//        $arr[$k]['children'] = array();
//    }

    header('Content-Type:application/json; charset=utf-8');
    $data = array('result' => 1, 'userList' => $userListArr);
    $encodeStr = urldecode(json_encode($data));
    echo $encodeStr;
    exit;
} else if ($cmd == "getUserListByAppId") {
    $requestObj = $HTTP_RAW_POST_DATA ? json_decode($HTTP_RAW_POST_DATA, true) : $requestObj;
    $appId = getDefaultVal($requestObj['appId'], "");
//    $userIdStr = getDefaultVal($requestObj['userIdStr'], "");
//testLog($requestObj);
    $where = "";
    $whereUser = "";
    if (!empty($appId)) {
        $where = $where . "  a.app_id = '" . $appId . "'";
    }
//    $getUserListByAppIdSql = "SELECT c.user_id, c.name  FROM `cuser` c left JOIN cuser_application ca ON ca.user_id = c.user_id  WHERE (c.enabled=1 AND c.is_admin !=1 AND $where)   ORDER BY c.user_id ASC ";
    $getUserListByAppIdSql = "SELECT a.droit_list, a.app_id  FROM `application` a   WHERE (a.Enabled=1 AND $where)  ";

    $result = mysql_query($getUserListByAppIdSql, $DSCon);
    $rows = mysql_num_rows($result);
    if ($rows < 1) {
        write_log("{'getUserList':'未查询到符合条件的应用，getUserListByAppIdSql:'.getUserListByAppIdSql}");
        exitErrorJson('未查询到符合条件的用户');
    }
//    if (!empty($userIdStr)) {
//        $userIdArr=array();
//        $userIdArr=explode(",",$userIdStr);
//        if(sizeof($userIdArr)>0){
//            foreach ($userIdArr AS $v){
//                $whereUser .=" c.user_id = '".$v."' OR ";
//            }
//            $whereUser=substr($whereUser,0,strrpos($whereUser,"OR"));
////          $whereUser = $whereUser . "  c.user_id = '" . $userIdArr[0] . "'";
//        }
//        $getUserInfoByAppIdSql = "SELECT c.user_id, c.name  FROM `cuser` c   WHERE (c.enabled=1 AND c.is_admin !=1 AND $whereUser)   ORDER BY c.user_id ASC ";
////testLog($getUserInfoByAppIdSql);
//        $getUserInfoByAppIdResult = mysql_query($getUserInfoByAppIdSql, $DSCon);
//        $getUserInfoByAppIdRows = mysql_num_rows($getUserInfoByAppIdResult);
//        $userInfoArr = array();
//        $i = 0;
//        for (; $i < $getUserInfoByAppIdRows; ++$i) {
//            $aliasRow = mysql_fetch_row($getUserInfoByAppIdResult);
//            $userArray = array();
//            $userArray['userId'] = $aliasRow['0'];
//            $userArray['name'] = gbkToUtf8Encode($aliasRow['1']);
//            $userInfoArr[$i] = $userArray;
//        }
//    }

    $userListArr = array();
    $i = 0;
    for (; $i < $rows; ++$i) {
        $row = mysql_fetch_row($result);
        $userArr = array();
        $userArr = explode("<", $row[0]);
        $j = 0;
        for (; $j < count($userArr); ++$j) {
            if ($userArr[$j]) {
                $whereUser = " c.user_id='" . trim(substr($userArr[$j], 0, strripos($userArr[$j], ">"))) . "'";
//                testLog($whereUser);
                $getUserInfoSql = "SELECT c.user_id, c.name  FROM `cuser` c   WHERE (c.enabled=1 AND c.is_admin !=1 AND $whereUser)   ORDER BY c.user_id ASC ";
                $getUserInfoResult = mysql_query($getUserInfoSql, $DSCon);
                $getUserInfoRows = mysql_num_rows($getUserInfoResult);
                $m = 0;
                for (; $m < $getUserInfoRows; ++$m) {
                    $aliasRow = mysql_fetch_row($getUserInfoResult);
                    $userInfoArr = array();
                    $userInfoArr['id'] = $aliasRow['0'];
                    $userInfoArr['name'] = gbkToUtf8Encode($aliasRow['1']);
                    $userListArr[$j] = $userInfoArr;
                }
            }
        }
    }
    array_multisort($userListArr);
//    if(count($userListArr)>0 && sizeof($userInfoArr)>0){
//        $userListArr=array_merge($userListArr,$userInfoArr);
//        $userListArr=formatSameArray($userListArr,'userId','name');
//    }
//    $arr = array();
//    foreach ($userListArr AS $k => $v) {
//        $arr[$k]['id'] = $v['userId'];
//        $arr[$k]['name'] = $v['name'];
//    }

    header('Content-Type:application/json; charset=utf-8');
    $data = array('result' => 1, 'userLists' => $userListArr);
    $encodeStr = urldecode(json_encode($data));
    echo $encodeStr;
    exit;
} else if ($cmd == "getServerList") {
    $getServerListSql = "select * from server ";
    $result = mysql_query($getServerListSql, $DSCon);
    $rows = mysql_num_rows($result);
    if ($rows < 1) {
        write_log("{'getServerList':'未查询到符合条件的服务器数据，getServerListSql:'.$getServerListSql}");
        exitErrorJson('未查询到符合条件的服务器数据');
    }

    $serverListArr = array();
    $i = 0;
    for (; $i < $rows; ++$i) {
        $row = mysql_fetch_row($result);
        $serverArr = array();
        $serverArr['serverId'] = $row['0'];
        $serverArr['computerName'] = gbkToUtf8Encode($row['2']);
        $serverListArr[$i] = $serverArr;
    }

    $row = mysql_fetch_row($result);

    header('Content-Type:application/json; charset=utf-8');
    $data = array('result' => 1, 'serverList' => $serverListArr);
    $encodeStr = urldecode(json_encode($data));
    echo $encodeStr;
    exit;
} else if ($cmd == "judgeApplicationListWhetherEqual") {
    $sameAppLists = array();
    $sameAppLists = judgeAndSameListCommon($adminName, $adminPwd, $DSCon, $keyVal);
//    testLog($sameAppLists);
    if (count($sameAppLists) > 0) {
        header('Content-Type:application/json; charset=utf-8');
        $data = array('result' => 1, 'pathListArr' => $sameAppLists);
        $encodeStr = urldecode(json_encode($data));
        echo $encodeStr;
        exit;
    }
    write_log("{'getServerList':'主副服务器应用程序列表不一致次数'}");
    exitErrorJson('主副服务器应用程序列表不一致，请按服务器发布方式发布应用');
} else if ($cmd == "getSameAppLists") {
    $sameAppLists = array();
    $sameAppLists = judgeAndSameListCommon($adminName, $adminPwd, $DSCon, $keyVal);
//    testLog($sameAppLists);
    if (count($sameAppLists) > 0) {
        header('Content-Type:application/json; charset=utf-8');
        $data = array('result' => 1, 'pathListArr' => $sameAppLists);
        $encodeStr = urldecode(json_encode($data));
        echo $encodeStr;
        exit;
    }
    write_log("{'getSameAppLists':'主副服务器应用程序列表为空'}");
    exitErrorJson('主副服务器应用程序列表为空');
} else if ($cmd == "getApplicationListByServerIp") {
    $hostIp = $requestObj['ServerIp'];

    if (!isset($hostIp) || empty($hostIp)) {
        write_log("{'getApplicationListByServerIp':'服务器IP没有值，$hostIp:'.$hostIp}");
        exitErrorJson('服务器IP没有值');
    }
    $getApplicationListSql = "select serverip.ip, server.WebPort from server,serverip where  server.ServerID=serverip.ServerId  and (serverip.ip='" . $hostIp . "' or serverip.ip='127.0.0.1')";

    $result = mysql_query($getApplicationListSql, $DSCon);
    $rows = mysql_num_rows($result);
    if ($rows < 1) {
        write_log("{'getApplicationListByServerIp':'未查询到符合条件的服务器IP、端口数据，$getApplicationListSql:'.$getApplicationListSql}");
        exitErrorJson('未查询到符合条件的服务器IP、端口数据');
    }

    $serverApplicationListArr = array();
    $i = 0;
    for (; $i < $rows; ++$i) {
        $row = mysql_fetch_row($result);
        $serverArr = array();
        $serverArr['serverIp'] = $row['0'];
        $serverArr['WebPort'] = $row['1'];
        $serverApplicationListArr[$i] = $serverArr;
    }
//    testLog($serverApplicationListArr);
//    $serverApplicationListArr = array(
//        0 => array(
//            'serverIp' => '192.168.0.105',
//            'WebPort' => '80',
//        ),
//    );
    if (isset($serverApplicationListArr) && !empty($serverApplicationListArr)) {
        foreach ($serverApplicationListArr AS $k => $v) {
            $initParamsTemp = "command_getAppPathLists__user_" . $adminName . "__pwd_" . $adminPwd;
//            testLog('keyVal='.$keyVal);
//            testLog('initParamsTempkeyVal='.$initParamsTemp . $keyVal);
            $signTemp = md5($initParamsTemp . $keyVal);
            $key = "wusuokey";
            $URL = "http://" . $serverApplicationListArr[$k]['serverIp'] . ':' . $serverApplicationListArr[$k]['WebPort'] . "/ConsoleExternalApi.XGI?initParams=" . $initParamsTemp . "&key=" . $key . "&sign=" . $signTemp;
//            testLog('getApplicationListByServerIp='.$URL);
//            $URL=;
            //初始化
            $ch = curl_init();
            //设置选项，包括URL
            curl_setopt($ch, CURLOPT_URL, $URL);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); //设置curl_exec()获取的信息以文件流的形式返回，而不是直接输出。
            curl_setopt($ch, CURLOPT_HEADER, 0);  //设置是否返回http头信息
            //执行并获取HTML文档内容
            $output = curl_exec($ch);
            //释放curl句柄
            curl_close($ch);
//            testLog($output);
        }
    }
    header('Content-Type:application/json; charset=utf-8');
    $encodeStr = $output;
    echo $encodeStr;
    exit;
} else if ($cmd == "allocatedPointsToServer") {
    $POST_JSON = json_decode($HTTP_RAW_POST_DATA, true);
    $serverId = $POST_JSON['serverId'];
    $pointNUm = $POST_JSON['pointNUm'];
    $maximumConcurrentNUm = $POST_JSON['maximumConcurrentNUm'];
    if (!isset($serverId) || empty($serverId)) {
        write_log("{'allocatedPointsToServer-参数非法':'服务器ID不可为空,serverId:'.$serverId}");
        exitErrorJson('服务器ID不可为空');
    }
    if (!isset($pointNUm) || empty($pointNUm)) {
        write_log("{'allocatedPointsToServer-参数非法':'分配点数不可为空,pointNUm:'.$pointNUm}");
        exitErrorJson('分配点数不可为空');
    }
    if (!isset($maximumConcurrentNUm) || empty($maximumConcurrentNUm)) {
        write_log("{'allocatedPointsToServer-参数非法':'可分配点数上限不可为空,pointNUm:'.$pointNUm}");
        exitErrorJson('可分配最大点数不可为空');
    }
    //账号是否已存在
    $result = mysql_query("SELECT serverip.ip, server.ServerID, server.ComputerName FROM server,serverip WHERE server.ServerID=serverip.ServerId  AND server.ServerID='" . $serverId . "'", $DSCon);
    if (mysql_num_rows($result) > 1) {
        write_log("{'allocatedPointsToServer-参数非法':'未查询到符合条件的服务器,serverId:'.$serverId}");
        exitErrorJson('未查询到符合条件的服务器！');
    }
//    $modify_pwd = getDefaultVal($POST_JSON['IfCanModifyPwdRemote'], "00");
//    if ($modify_pwd != "00") {
//        $updateSql2 .= ",modify_pwd='" . $modify_pwd . "'";
//    }
    $allocatedPointsInformation = base64_decode($COMCASWEB->getfarminfo("KEY_LIC_ALLOC"));

    $allocatedPointsInformation = str_replace(PHP_EOL, ' ', $allocatedPointsInformation);
    $allocatedPointsInformation = explode(' ', $allocatedPointsInformation);
    $allocatedPointsInformation = array_filter($allocatedPointsInformation);
    $differenceValue = 0;
    if (sizeof($allocatedPointsInformation) > 0) {
        $i = 0;
        for (; $i < count($allocatedPointsInformation); $i++) {
            $allocatedPointsInformationTmp = explode('=', $allocatedPointsInformation[$i]);
            if (sizeof($allocatedPointsInformationTmp) > 0) {
                if (in_array($serverId, $allocatedPointsInformationTmp)) {//拼接
                    $allocatedPointsInformation[$i] = $serverId . "=" . $pointNUm;
                    testLog($allocatedPointsInformation[$i]);
                } else {//可以分配的剩余点数
                    $differenceValue += intval(sizeof($allocatedPointsInformationTmp) > 1 ? intval(-$allocatedPointsInformationTmp[1]) : intval($allocatedPointsInformation[$i]));
                }
            }
        }
    }

    if (intval($pointNUm) > intval($differenceValue)) { //超过剩余点数提示
        write_log("{'allocatedPointsToServer':'输入点数必须小于等于总点数,serverId:'.$serverId}");
        exitErrorJson('输入的点数超过了许可！');
    }

    $allocatedPointsInformationStr = "";
    $allocatedPointsInformationStr = implode(PHP_EOL, $allocatedPointsInformation) . PHP_EOL;
    $allocatedPointsInformationStr = getDefaultVal($allocatedPointsInformationStr, "00");
    if ($allocatedPointsInformationStr != "00") {
        $updateSql = "value='" . base64_encode($allocatedPointsInformationStr) . "'";
    } else {
        write_log("{'allocatedPointsToServer-参数非法':'分配点数拼接错误,serverId:'.$serverId}");
        exitErrorJson('点数字符串错误！');
    }
//testLog(base64_encode($allocatedPointsInformationStr) );
    $name = "KEY_LIC_ALLOC";
    $updateFarmSql = "update farm set " . $updateSql . " where name='" . $name . "'";
    testLog($updateFarmSql);
    $result = mysql_query($updateFarmSql, $DSCon);
    testLog($result);
    if (!$result) {
        write_log("{'allocatedPointsToServer':'分配失败-updateUserSql:'.$updateUserSql}");
        exitErrorJson("分配失败！");
    } else {
        header('Content-Type:application/json; charset=utf-8');
        $data = array('result' => 1, 'msg' => urlencode("分配成功"));
        $encodeStr = urldecode(json_encode($data));
        echo $encodeStr;
        exit;
    }
} else if ($cmd == "getServerPointAllocationInformationList") {
    $POST_JSON = json_decode($GLOBALS ["HTTP_RAW_POST_DATA"], true);
    $fromTotalPoint = trim($POST_JSON['FromTotalPoint']);
    $getServerIpListSql = "SELECT serverip.ip, server.ServerID, server.ComputerName FROM server,serverip WHERE server.ServerID=serverip.ServerId ";
    $result = mysql_query($getServerIpListSql, $DSCon);
    $rows = mysql_num_rows($result);
    if ($rows < 1) {
        write_log("{'getServerList':'未查询到符合条件的服务器IP数据，$getServerIpListSql:'.$getServerIpListSql}");
        exitErrorJson('未查询到符合条件的服务器IP数据');
    }
    $allocatedPointsInformation = base64_decode($COMCASWEB->getfarminfo("KEY_LIC_ALLOC"));
    $allocatedPointsInformation = str_replace(PHP_EOL, ' ', $allocatedPointsInformation);
    $allocatedPointsInformation = explode(' ', $allocatedPointsInformation);
    $allocatedPointsInformation = array_filter($allocatedPointsInformation);
    
    $allocatedPointsListArr = array();
    $openServerPermitNumber = getOpenServerPermitNumber();

    $i = 0;
    for (; $i < $rows; ++$i) {
        $row = mysql_fetch_row($result);
//testLog($row);
        $allocatedArr = array();
        $allocatedArr['serverName'] = $row['2'];
        if ($row['1'] && sizeof($openServerPermitNumber) > 0) {
            foreach ($openServerPermitNumber AS $key => $val) {
                if ($row['1'] == $key) {
                    $allocatedArr['numberOfOccupationPermits'] = $val;
                } else {
                    $allocatedArr['numberOfOccupationPermits'] = 0;
                }
            }
        } else {
            $allocatedArr['numberOfOccupationPermits'] = 0;
        }
//        $allocatedArr['serverId'] = $row['1'];
        if ($row['1'] && sizeof($allocatedPointsInformation) > 0) {
            $j = 0;
            for (; $j < count($allocatedPointsInformation); $j++) {
                $allocatedPointsInformationTmp = explode('=', $allocatedPointsInformation[$j]);
//                testLog('arraynumber='.sizeof($allocatedPointsInformationTmp));
                if (sizeof($allocatedPointsInformationTmp) > 0) {
//                    testLog($row['1']);testLog($allocatedPointsInformationTmp);
//                    testLog(in_array($row['1'], $allocatedPointsInformationTmp) );
//                    testLog($allocatedPointsInformationTmp[1]);
                    if (in_array($row['1'], $allocatedPointsInformationTmp)) {
                        $allocatedArr['numberOfLeftOverLicenses'] = ($allocatedPointsInformationTmp[1] - $allocatedArr['numberOfOccupationPermits']);
                        $allocatedArr['NumberOfAllocatedLicenses'] = $allocatedPointsInformationTmp[1];
                        $sumOfAllocatedLicenses += $allocatedPointsInformationTmp[1];
                    }
                    if (sizeof($allocatedPointsInformationTmp) == 1) {
                        $totalPoints += $allocatedPointsInformationTmp[0];
                    }
                }
            }
        }
//        $allocatedArr['numberOfClusterLicenses'] = ($allocatedPointsInformation[0] == NULL ? 0 : $allocatedPointsInformation[0]);
        $allocatedArr['numberOfClusterLicenses'] = $fromTotalPoint ? $fromTotalPoint : 0;
        $allocatedPointsListArr[$i] = $allocatedArr;
    }

    $maxNumberAllocated = $totalPoints - $sumOfAllocatedLicenses;
    if (sizeof($allocatedPointsListArr) > 0) {
        $m = 0;
        for (; $m < count($allocatedPointsListArr); ++$m) {
            $allocatedPointsListArr[$m]['totalPoints'] = $totalPoints;
            $allocatedPointsListArr[$m]['maxNumberAllocated'] = $maxNumberAllocated;
        }
    }

    header('Content-Type:application/json; charset=utf-8');
    $data = array('result' => 1, 'allocatedPointsList' => $allocatedPointsListArr);

    $encodeStr = urldecode(json_encode($data));
    echo $encodeStr;
    exit;
} else if ($cmd == "getServerIpList") {
    $getServerIpListSql = "SELECT serverip.ip, server.ServerID, server.ComputerName FROM server,serverip WHERE server.ServerID=serverip.ServerId ";
//testLog($getServerIpListSql);
    $result = mysql_query($getServerIpListSql, $DSCon);
    $rows = mysql_num_rows($result);
    if ($rows < 1) {
        write_log("{'getServerList':'未查询到符合条件的服务器IP数据，$getServerIpListSql:'.$getServerIpListSql}");
        exitErrorJson('未查询到符合条件的服务器IP数据');
    }

    $serverIpListArr = array();
    $i = 0;
    for (; $i < $rows; ++$i) {
        $row = mysql_fetch_row($result);
        $serverArr = array();
        $serverArr['serverIp'] = $row['0'];
        $serverArr['serverId'] = $row['1'];
        $serverArr['computerName'] = $row['2'];
        $serverIpListArr[$i] = $serverArr;
    }
//testLog($serverIpListArr);
    header('Content-Type:application/json; charset=utf-8');
    $data = array('result' => 1, 'serverIpList' => $serverIpListArr);
    $encodeStr = urldecode(json_encode($data));
    echo $encodeStr;
    exit;
} else if ($cmd == "getServerIpPort") {
    $POST_JSON = json_decode($HTTP_RAW_POST_DATA, true);
    $IP = $POST_JSON['iP'];
    $getServerIpListSql = "select serverip.ip, server.WebPort from server,serverip where server.ServerID=serverip.ServerId AND serverip.ip='" . $IP . "'";

    $result = mysql_query($getServerIpListSql, $DSCon);
    $rows = mysql_num_rows($result);
    if ($rows < 1) {
        write_log("{'getServerIpPort':'未查询到符合条件的服务器IP数据，$getServerIpListSql:'.$getServerIpListSql}");
        exitErrorJson('未查询到符合条件的服务器IP数据');
    }

    $serverIpListArr = array();
    $i = 0;
    for (; $i < $rows; ++$i) {
        $row = mysql_fetch_row($result);
        $serverArr = array();
        $serverArr['url'] = "http://" . $row['0'] . ":" . $row['1'] . "/";
        $serverIpListArr[$i] = $serverArr;
    }

    if ($serverIpListArr[0]['url']) {
        $initParamsTemp = "command_getAppPathLists__user_" . $adminName . "__pwd_" . $adminPwd;
        $signTemp = md5($initParamsTemp . $keyVal);
        $key = "wusuokey";
        $URL = $serverIpListArr[0]['url'] . "/ConsoleExternalApi.XGI?initParams=" . $initParamsTemp . "&key=" . $key . "&sign=" . $signTemp;

        //初始化
        $ch = curl_init();
        //设置选项，包括URL
        curl_setopt($ch, CURLOPT_URL, $URL);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); //设置curl_exec()获取的信息以文件流的形式返回，而不是直接输出。
        curl_setopt($ch, CURLOPT_HEADER, 0);  //设置是否返回http头信息
        //执行并获取HTML文档内容
        $output = curl_exec($ch);
        //释放curl句柄
        curl_close($ch);
//        testLog("getServerIpPort-7=" . $output);
        if ($output) {
            $result = json_decode($output, true);
            header('Content-Type:application/json; charset=utf-8');
            $data = $result;
            $encodeStr = urldecode(json_encode($data));
            echo $encodeStr;
            exit;
        } else {
            exitErrorJson('未查询到符合条件的数据');
        }
    }

} else if ($cmd == "getAlertPolicyList") {
    $getAlertPolicyListSql = "select * from alertpolicy ";
    $result = mysql_query($getAlertPolicyListSql, $DSCon);
    $rows = mysql_num_rows($result);
    if ($rows < 1) {
        write_log("{'getAlertPolicyList':'未查询到符合条件的报警策略数据，getAlertPolicyListSql:'.$getAlertPolicyListSql}");
        exitErrorJson('未查询到符合条件的报警策略数据');
    }

    $alertPolicyListArr = array();
    $i = 0;
    for (; $i < $rows; ++$i) {
        $row = mysql_fetch_row($result);
        $alertPolicyArr = array();
        $alertPolicyArr['alertId'] = $row['0'];
        $alertPolicyArr['alertName'] = gbkToUtf8Encode($row['1']);
        $alertPolicyArr['alertDesc'] = gbkToUtf8Encode($row['2']);
        $alertPolicyListArr[$i] = $alertPolicyArr;
    }

    $row = mysql_fetch_row($result);

    header('Content-Type:application/json; charset=utf-8');
    $data = array('result' => 1, 'alertPolicyList' => $alertPolicyListArr);
    $encodeStr = urldecode(json_encode($data));
    echo $encodeStr;
    exit;
} else if ($cmd == "publishApp") {
    $POST_JSON = json_decode($HTTP_RAW_POST_DATA, true);
//    $POST_JSON['ico'] = $POST_JSON['ico'] ? bin2hex(base64_decode($POST_JSON['ico'])) : $POST_JSON['ico'];
    $name = $POST_JSON['name'];
    if (!isset($name) || empty($name)) {
        write_log("{'publishApp':'应用名称不可为空，name:'.$name}");
        exitErrorJson('应用名称不可为空');
    }
    $name = utf8ToGbk($name);

    $type = $POST_JSON['type'];
    if (!isset($type) || empty($type)) {
        write_log("{'publishApp':'应用类型不可为空'}");
        exitErrorJson('应用类型不可为空');
    }

    //应用是否已存在
    $result = mysql_query("select app_id from application where name='" . $name . "'", $DSCon);
    $rowsName = mysql_num_rows($result);

//    if (mysql_num_rows($result) >= 1) {
//
//        write_log("{'publishApp':'要发布的应用名称已存在，name:'.$name}");
//        exitErrorJson('要发布的应用名称已存在！');
//    }

    $app_id = getglobalincLoop('APP');
    if ($rowsName == 1) {
        $tmp = mysql_fetch_row($result);
        $app_id = $tmp[0];
//        testLog('appIdByName=' . $app_id);
    }
    if ($type == "bs") {
        $app_path = getDefaultVal($POST_JSON['appUrl'], "");
        $app_path = utf8ToGbk($app_path);
        $app_work_dir = "";
        $app_type_mode = 3;
    } //cs类型的应用
    else {
        $app_path = getDefaultVal($POST_JSON['appPath'], "");
        $app_path = utf8ToGbk($app_path);

        $app_work_dir = getDefaultVal($POST_JSON['workPath'], "");
        $app_work_dir = utf8ToGbk($app_work_dir);
        $app_type_mode = 0;
    }

    $is_dir = 0;
    $f_id = "Null";
    $description = getDefaultVal($POST_JSON['desc'], "");
    $description = utf8ToGbk($description);
    $height = 768;
    $width = 1024;
    $color = getDefaultVal($POST_JSON['remoteClientWindowColor'], 2);
    if ($color == 256) {
        $color = 0;
    } else if ($color == 15) {
        $color = 1;
    } else if ($color == 16) {
        $color = 2;
    } else if ($color == 24) {
        $color = 3;
    } else if ($color == 32) {
        $color = 4;
    }
    $window_style = 0;
    $maxed = 0;
    $network_protocol = "TCP";
    $app_protocol = "RAP1.0";
    $screen_full = 3;
    $encrypt_level = 2;
    $proportion = 100;
    $delete_after_read = 1;
    $shortcut = 0;
    $Head = 'ico';
    $resultIco = mysql_query("SELECT ID, INC FROM gloabolinc WHERE head='{$Head}'", $DSCon);
    $rowIco = mysql_fetch_row($resultIco);
    $inc = ($rowIco[1] + 1);
    $F = "";
    $F .= sprintf("%%0%dd", 11 - strlen(strtoupper($Head)));
    $ID = strtoupper($Head) . sprintf($F, $inc);
    mysql_query("update gloabolinc set inc='" . $inc . "',ID='{$ID}' where head='ico'", $DSCon);

    $POST_JSON['icoName'] = $ID . '.gif';

    $ico_name = getDefaultVal($POST_JSON['icoName'], $ID . '.gif');
    $ico_name = utf8ToGbk($ico_name);
    //TO-DO
    //存储blob
    // addslashes(file_get_contents(文件路径));
    $ico = getDefaultVal(addslashes(hex2bin($POST_JSON['ico'])), "");
    $icoico = getDefaultVal(addslashes(hex2bin($POST_JSON['icoico'])), "");
    $bmp = getDefaultVal(addslashes(hex2bin($POST_JSON['bmp'])), "");
    $icoTimeUrl = getDefaultVal($POST_JSON['icoTimeUrl'], "");
    $icoTimeUrl = utf8ToGbk($icoTimeUrl);

    $is_new_ico = 1;
    $hide_title = 0;
    $enable_ssl = getDefaultVal($POST_JSON['ifSSLAndTSLUsed'], 1);
    $redirect_audio = getDefaultVal($POST_JSON['ifSoundMap'], 0);
    $redirect_driver = getDefaultVal($POST_JSON['ifDiskMap'], 0);
    $redirect_printer = getDefaultVal($POST_JSON['ifDAMap'], 1);
    $redirect_port = getDefaultVal($POST_JSON['ifLptComMap'], 0);
    $redirect_usb = getDefaultVal($POST_JSON['ifUsbMap'], 0);
    $redirect_clip = getDefaultVal($POST_JSON['ifShareBoardMap'], 1);
    $redirect_salver = getDefaultVal($POST_JSON['ifTrayMap'], 1);
    $redirect_DDE = getDefaultVal($POST_JSON['ifDDEMap'], 1);
    $redirect_ime = getDefaultVal($POST_JSON['ifTypeWritingMap'], 1);
    $wait_printer_create = getDefaultVal($POST_JSON['ifNotWaitingDACreatedWhenAppRunning'], 1);

    $ifLimitAppNumInEnvironment = getDefaultVal($POST_JSON['ifNotWaitingDACreatedWhenAppRunning'], 0);
    $app_session_count = 0;
    if ($ifLimitAppNumInEnvironment == 1) {
        $app_session_count = getDefaultVal($POST_JSON['appLimitNum'], 0);
    }

    $each_user_one_session = getDefaultVal($POST_JSON['eachUserOneSession'], 0);
    $cpu_level = getDefaultVal($POST_JSON['cpuPR'], 0);
    if ($cpu_level > 0) {
        $cpu_level = $cpu_level - 1;
    }
//    $getAdminUserIdSql = "SELECT user_id FROM cuser WHERE is_group=0 AND name='Admin'";
////    testLog($getAdminUserIdSql);
//    $result = mysql_query($getAdminUserIdSql, $DSCon);
//    $rows = mysql_num_rows($result);
//    if ($rows < 1) {
//        write_log("{'getAllUserStr()':'未查询到符合条件的用户，getUserListSql:'.$getAdminUserIdSql}");
//        exitErrorJson('查询用户集合：未查询到符合条件的用户');
//    }
//    $row = mysql_fetch_row($result);
////    testLog($row);
//    $POST_JSON['userIdStr'] = $row[0];
//    testLog('row0='.$row[0]);
    $POST_JSON['userIdStr'] = getAdminUserId();
    $droit_list = getDefaultVal($POST_JSON['userIdStr'], "");
    if (isset($droit_list) && !empty($droit_list)) {//公信发布应用，默认分配用户为admin
        $userIdArr = explode(",", $droit_list);
//        testLog($userIdArr);
        $droit_list = "";
        foreach ($userIdArr as $userId) {
            $droit_list = $droit_list . "<" . $userId . ">";
        }
    }
// else {
//        $droit_list = getAllUserStr();
//    }

    $alert_policy_id = getDefaultVal($POST_JSON['alermPolicyIdStr'], "Null");
    $remark = "";
    $lm_Instance = 0;
    $window_Zone = 0;
    $UsedDefaultIcon = 0;
    $Enabled = 1;
    $app_parm = getDefaultVal($POST_JSON['runParam'], "");
    $SavePrinterPram = getDefaultVal($POST_JSON['ifDAParamsSaved'], 1);
    $UseScript = getDefaultVal($POST_JSON['ifUsedScript'], 0);
    $UseScript = utf8ToGbk($UseScript);
    $LoginScript = getDefaultVal($POST_JSON['initScriptContent'], null);
    $LoginScript = utf8ToGbk($LoginScript);
    $LogoutScript = getDefaultVal($POST_JSON['endScriptContent'], null);
    $LogoutScript = utf8ToGbk($LogoutScript);
    $ShareSession = getDefaultVal($POST_JSON['enbleSessionSharing'], 1);
    $isx64 = getDefaultVal($POST_JSON['if64SessionEnvironment'], 0);
    $ChgMode = getDefaultVal($POST_JSON['enbleTCCompatibilityMode'], 0);
    $WaitOtherProc = getDefaultVal($POST_JSON['ifWaitAllSessionProcessEnding'], 0);
    $redirect_desktop = getDefaultVal($POST_JSON['ifMapDesktop'], 0);
    $redirect_mydoc = getDefaultVal($POST_JSON['ifMapMyDocument'], 0);
    $ISAUTOLOGON = 0;
    $AUTOLOGON_ABS = "";
    $FINDTYPE = 0;

    $addAppSql = "insert application (app_id,name,app_path,app_work_dir,is_dir,f_id,description,height,width,color,window_style,maxed,network_protocol,app_protocol,screen_full,encrypt_level,app_type_mode,proportion,delete_after_read,shortcut,ico_name,ico,is_new_ico,hide_title,enable_ssl,redirect_audio,redirect_driver,redirect_printer,redirect_port,redirect_usb,redirect_clip,redirect_salver,redirect_DDE,redirect_ime,wait_printer_create,app_session_count,each_user_one_session,cpu_level,droit_list,load_balance_policy_id,security_policy_id,alert_policy_id,remark,lm_Instance,window_Zone,UsedDefaultIcon,Enabled,app_parm,salver,AppOpenFileTypes,SavePrinterPram,UseScript,LoginScript,LogoutScript,ShareSession,DirDroit,IcoIco,bmp,isx64,ChgMode,WaitOtherProc,ISAUTOLOGON,AUTOLOGON_ABS,FINDTYPE,SENDINTERVAL,WAITTIME,redirect_desktop,redirect_mydoc) values ('" . $app_id . "', '" . $name . "', '"
        . $app_path . "', '" . $app_work_dir . "', " . $is_dir . ", '" . $f_id . "', '" . $description . "', " . $height . ", " . $width . ", 2, 0, 0, 'TCP', 'RAP1.0', 3, 2, 0, 100, 1, 0, '" . $ico_name . "', '" . $ico . "', 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, '" . $droit_list . "', 'Null', NULL, 'Null', '', 0, 0, 0, 1, '', NULL, NULL, 1, 0, NULL, NULL, '" . $ShareSession . "', NULL, '" . $icoico . "', '" . $bmp . "', 0, 0, 1, 0, '', 0, NULL, NULL, 0, 0);";
//    $addAppSql = "insert application (app_id,name, app_path, app_work_dir, app_type_mode,is_dir,f_id,description ,height ,width , color,window_style ,maxed , network_protocol, app_protocol,screen_full , encrypt_level,proportion"
//        . ",delete_after_read ,shortcut , ico_name,ico,icoico ,bmp ,is_new_ico,hide_title,enable_ssl,redirect_audio,redirect_driver,redirect_printer,redirect_port,redirect_usb,redirect_clip,redirect_salver,redirect_DDE"
//        . ",redirect_ime,wait_printer_create,app_session_count,each_user_one_session,cpu_level,droit_list,alert_policy_id,remark,lm_Instance,window_Zone,UsedDefaultIcon,Enabled,app_parm,SavePrinterPram
//        ,UseScript,LoginScript,LogoutScript,ShareSession,isx64,ChgMode,WaitOtherProc,redirect_desktop,redirect_mydoc,ISAUTOLOGON,AUTOLOGON_ABS,FINDTYPE,IsPublicApp) values ('" . $app_id . "','" . $name . "', '"
//        . $app_path . "', '" . $app_work_dir . "', " . $app_type_mode . ", " . $is_dir . ",'" . $f_id . "', '" . $description . "', " . $height . ", " . $width . ", " . $color . ", " . $window_style . ", " . $maxed . ", '" . $network_protocol . "', '" . $app_protocol . "', "
//        . $screen_full . ", " . $encrypt_level . ", " . $proportion . "," . $delete_after_read . ", " . $shortcut . ", '" . $ico_name . "','" . $ico . "', '" . $icoico . "', '"
//        . $bmp . "', " . $is_new_ico . ", " . $hide_title . "," . $enable_ssl . "," . $redirect_audio . "," . $redirect_driver . "," . $redirect_printer . "," . $redirect_port . "," . $redirect_usb . "," . $redirect_clip . "," . $redirect_salver . "," . $redirect_DDE . ","
//        . $redirect_ime . "," . $wait_printer_create . "," . $app_session_count . "," . $each_user_one_session . "," . $cpu_level . ",'" . $droit_list . "','" . $alert_policy_id . "','" . $remark . "'," . $lm_Instance . "," . $window_Zone . "," . $UsedDefaultIcon . ","
//        . $Enabled . ",'" . $app_parm . "'," . $SavePrinterPram . "," . $UseScript . ",'" . $LoginScript . "','" . $LogoutScript . "'," . $ShareSession . "," . $isx64 . "," . $ChgMode . "," . $WaitOtherProc . "," . $redirect_desktop . "," . $redirect_mydoc . "," . $ISAUTOLOGON . ",'"
//        . $AUTOLOGON_ABS . "'," . $FINDTYPE . ",'1');";
    if ($rowsName < 1) {
        $result = mysql_query($addAppSql, $DSCon);
        if (!$result) {
            exitErrorJson("添加应用失败！");
        }
    }

    if ($result || $rowsName >= 1) {
        $getServerIdListSql = "select ServerID from server ";
        $result = mysql_query($getServerIdListSql, $DSCon);
        $rows = mysql_num_rows($result);
        if ($rows < 1) {
            write_log("{'uploadFileToMenu':'未查询到符合条件的服务器ID列表，getServerListSql:'.$getServerIdListSql}");
            exitErrorJson('未查询到符合条件的服务器ID列表');
        }

        $serverIdAllArr = array();
        $i = 0;
        for (; $i < $rows; ++$i) {
            $row = mysql_fetch_row($result);
            $serverIdAllArr[$i] = $row['0'];
        }
        $serverIdStr = $POST_JSON['serverIdStr'];
//        testLog($serverIdStr);
        if (!isset($serverIdStr) || empty($serverIdStr)) {
//            testLog("flowing applicaing");
            $VirtualDiskServer = $COMCASWEB->getfarminfo("VirtualDiskServer");
            $serverIp = $_SERVER['SERVER_ADDR'] != "127.0.0.1" ? $_SERVER['SERVER_ADDR'] : $VirtualDiskServer;
//            testLog('serverIp=' . $serverIp);
//            $serverSql = "select server.ServerID,server.banport,serverip.ip from server,serverip where server.ServerId=serverip.serverid and (serverip.ip='" . $serverIp . "' or serverip.ip='127.0.0.1')";
//            $result = mysql_query($serverSql, $DSCon);
//            if (mysql_num_rows($result) < 1) {
//                write_log("{'publishApp':'未查询到符合条件的服务器信息，serverSql:'.$serverSql}");
//
//                $delSql = "delete from application where app_id='" . $app_id . "'";
//                $result3 = mysql_query($delSql, $DSCon);
//                if (!$result3) {
//                    write_log("{'publishApp':'删除应用失败，delSql:'.$delSql}");
//                }
//                exitErrorJson('未查询到符合条件的服务器信息');
//            }
////            $row = mysql_fetch_row($result);//
//            $rows = mysql_num_rows($result);
//            $serverId = $row[0];
            $getServerIpListSql = "SELECT  server.ServerID, serverip.ip FROM server,serverip WHERE server.ServerID=serverip.ServerId";
//            testLog($getServerIpListSql);
            $result = mysql_query($getServerIpListSql, $DSCon);
            $rows = mysql_num_rows($result);
            if ($rows < 1) {
                write_log("{'publishApp':'未查询到服务器IP数据，$getServerIpListSql:'.$getServerIpListSql}");
                exitErrorJson('未查询到服务器IP数据');
            }
//            $serverIpListArr = array();
//            $i = 0;
//            for (; $i < $rows; ++$i) {
//                $row = mysql_fetch_row($result);
//                $serverArr = array();
//                $serverArr['serverIp'] = $row['0'];
//                $serverArr['serverId'] = $row['1'];
//                $serverIpListArr[$i] = $serverArr;
//            }
            $serverIpListArr = array();
//            testLog(sizeof($rows));
//            testLog(count($rows));
            if (sizeof($rows) > 0) {
                $s = 0;
                for (; $s < count($row); ++$s) {
                    $row = mysql_fetch_row($result);
                    $serverIdArrStr .= $row[0] . ',';
                }
            }
            $serverIdArrStr = substr($serverIdArrStr, 0, strlen($serverIdArrStr) - 1);
//            testLog($serverIdArrStr);
            $serverIdListArr = explode(",", $serverIdArrStr);
//            testLog($serverIdListArr);
//            testLog(sizeof($serverIdListArr));
            if (sizeof($serverIdListArr) > 0) {
                foreach ($serverIdListArr as $serverId) {
                    $ID = getglobalincLoop('ASr');
                    $Flag = "Null";
                    $Enabled = 1;
                    $addServerAppRelationSql = "insert app_server (id, AppId, ServerId, InstallFile,InstallPath,Flag,Enabled) values ('" . $ID . "', '" . $app_id . "', '" . $serverId . "', '" . $app_path . "', '" . $app_work_dir . "', '" . $Flag . "', " . $Enabled . ");";
//                    testLog($addServerAppRelationSql);
                    if ($serverId) {
                        $result = mysql_query($addServerAppRelationSql, $DSCon);
                        if (!$result) {
                            $delSql = "delete from application where app_id='" . $app_id . "'";
                            $result3 = mysql_query($delSql, $DSCon);
                            if (!$result3) {
                                write_log("{'publishApp':'删除应用失败，delSql:'.$delSql}");
                                exitErrorJson("删除应用失败");
                            }
                            write_log("{'publishApp':'添加应用服务器关联数据失败，addServerAppRelationSql:'.$addServerAppRelationSql}");

                            header('Content-Type:application/json; charset=utf-8');
                            $data = array('result' => 0, 'msg' => urlencode('添加应用服务器关联数据失败！'));
                            $encodeStr = urldecode(json_encode($data));
                            echo $encodeStr;
                            exit;
                        }
                    }
                }
            }
            //删除无用的App文件
//            foreach ($serverIdAllArr as $serverIdK) {
//                if ($serverId != $serverIdK) {
//                    $selectServerIpSql = "select ip from serverip where serverid='" . $serverIdK . "'";
//                    $result = mysql_query($selectServerIpSql, $DSCon);
//                    if (mysql_num_rows($result) < 1) {
//                        write_log("{'publishApp':'未查询到符合条件的服务器信息，selectServerIpSql:'.$selectServerIpSql}");
//                        exitErrorJson('未查询到符合条件的服务器信息');
//                    }
//                    $row = mysql_fetch_row($result);
//                    $hostIp = $row[0];
//
//                    $conn = ftp_connect($hostIp) or die("Could not connect");
//                    ftp_login($conn, "anonymous", "");
////                    ftp_chdir($conn,"ftpfile");
//                    //删除文件
//                    ftp_delete($conn, $app_work_dir);
//                    //开始上传
////                    ftp_put($conn,$_FILES["file"]["name"],$tempFile,FTP_BINARY);
//                    ftp_close($conn);
//                }
//            }


        } else {
            $serverIdArr = explode(",", $serverIdStr);
            //删除无用的App文件
            foreach ($serverIdAllArr as $serverIdK) {
                if (!isInArray($serverIdArr, $serverIdK)) {
                    $selectServerIpSql = "SELECT ip FROM serverip WHERE serverid='" . $serverIdK . "'";
//                    testLog($selectServerIpSql);
                    $result = mysql_query($selectServerIpSql, $DSCon);
                    if (mysql_num_rows($result) < 1) {
                        write_log("{'publishApp':'未查询到符合条件的服务器信息，selectServerIpSql:'.$selectServerIpSql}");
                        exitErrorJson('未查询到符合条件的服务器信息');
                    }
                    $row = mysql_fetch_row($result);
                    $hostIp = $row[0];

                    $result2 = mysql_query("SELECT WebPort FROM server WHERE ServerId='" . $serverIdK . "'", $DSCon);
//                    testLog("SELECT WebPort FROM server WHERE ServerId='" . $serverIdK . "'");
                    if (mysql_num_rows($result2) < 1) {
                        write_log("{'publishApp':'未查询到符合条件的服务器端口'}");
                        exitErrorJson('未查询到符合条件的服务器端口');
                    }
                    $rowServerWebPort = mysql_fetch_row($result2);
                    $webPort = $rowServerWebPort[0];
//                    $initParamsTemp = "command_delAppFile__user_" . $adminName . "__pwd_" . $adminPwd . "__delFilePath_" . $app_work_dir;
//                    $signTemp = md5($initParamsTemp . $keyVal);
//                    $url = "http://" . $hostIp . ":" . $webPort . "/ExternalUploadApi.XGI?initParams=" . $initParamsTemp . "&key=" . $_REQUEST['key'] . "&sign=" . $signTemp;
//
//                    $ch = curl_init();
//                    curl_setopt($ch, CURLOPT_URL, $url);
//                    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
//                    $data = curl_exec($ch);
//                    curl_close($ch);
                }
            }

            foreach ($serverIdArr as $serverId) {
                $ID = getglobalincLoop('ASr');
                $Flag = "Null";
                $addServerAppRelationSql = "insert app_server (id, AppId, ServerId, InstallFile,InstallPath,Flag,Enabled) values ('" . $ID . "', '" . $app_id . "', '" . $serverId . "', '" . $app_path . "', '" . $app_work_dir . "', '" . $Flag . "', " . $Enabled . ");";
                $result = mysql_query($addServerAppRelationSql, $DSCon);
                if (!$result) {
                    $delSql = "delete from application where app_id='" . $app_id . "'";
                    $result3 = mysql_query($delSql, $DSCon);
                    if (!$result3) {
                        write_log("{'publishApp':'删除应用失败，delSql:'.$delSql}");
                        exitErrorJson("删除应用失败");
                    }
                    write_log("{'publishApp':'添加应用服务器关联数据失败，addServerAppRelationSql:'.$addServerAppRelationSql}");

                    header('Content-Type:application/json; charset=utf-8');
                    $data = array('result' => 0, 'msg' => urlencode('添加应用服务器关联数据失败！'));
                    $encodeStr = urldecode(json_encode($data));
                    echo $encodeStr;
                    exit;
                }
            }
        }

        header('Content-Type:application/json; charset=utf-8');
        $data = array('result' => 1, 'appId' => $app_id);
        exit(json_encode($data));
    }
} else if ($cmd == "editApp") {
    $POST_JSON = json_decode($HTTP_RAW_POST_DATA, true);
    $app_id = $requestObj['appId'];
    $app_name = $POST_JSON['name'];
    if (!isset($app_id) || empty($app_id)) {
        write_log("{'editApp':'应用ID不可为空，app_id:'.$app_id}");
        exitErrorJson('应用ID不可为空');
    }

    //应用是否已存在
    $result = mysql_query("select * from application where app_id='" . $app_id . "'", $DSCon);

    if (mysql_num_rows($result) < 1) {
        write_log("{'editApp':'要编辑的应用不存在，app_id:'.$app_id}");
        exitErrorJson('要编辑的应用不存在！');
    }
    if (isset($app_name)) {
        $result = mysql_query("select * from application where name='{$app_name}' OR app_id='" . $app_id . "'", $DSCon);
        if (mysql_num_rows($result) > 1) {
            write_log("{'editApp':'要编辑的应用不能重名，app_name:'.$app_name}");
            exitErrorJson('要编辑的应用不能重名！');
        }
    }

    $updateSql = "";
    $updateAppServerSql = "";
    $type = $POST_JSON['type'];
    if ($type == "bs") {
        $app_path = getDefaultVal($POST_JSON['appUrl'], "");
        $app_path = utf8ToGbk($app_path);
        $app_work_dir = "";
        $app_type_mode = 3;
        $updateSql .= ",app_path='" . $app_path . "'";
        $updateSql .= ",app_work_dir='" . $app_work_dir . "'";
        $updateSql .= ",app_type_mode=" . $app_type_mode;
    } //cs类型的应用
    else if ($type == "cs") {
        $app_path = getDefaultVal($POST_JSON['appPath'], "");
        $app_path = utf8ToGbk($app_path);
        $app_work_dir = getDefaultVal($POST_JSON['workPath'], "");
        $app_work_dir = utf8ToGbk($app_work_dir);
        $app_type_mode = 0;
        if ($app_path != "" && $app_work_dir != "") {
            $app_path=strpos($app_path,'\\')>1?strtr($app_path,"\\","/"):$app_path;
            $app_work_dir=strpos($app_work_dir,'\\')>1?strtr($app_work_dir,"\\","/"):$app_work_dir;
            $updateSql .= ",app_path='" . $app_path . "'";
            $updateSql .= ",app_work_dir='" . $app_work_dir  . "'";
            $updateAppServerSql .= ",InstallFile='" . $app_path . "'";
            $updateAppServerSql .= ",InstallPath='" . $app_work_dir . "'";
        }
        $updateSql .= ",app_type_mode=" . $app_type_mode;
    }
    $name = getDefaultVal($POST_JSON['name'], "00");
    if ($name != "00") {
        $name = iconv("UTF-8", "GBK//IGNORE", $name);
        $updateSql .= ",name='" . $name . "'";
    }
    $description = getDefaultVal($POST_JSON['desc'], "00");
    if ($description != "00" || $description == '00') {
        //$description=='00'描述框没有输入
        $description = ($description == '00') ? '' : utf8ToGbk($description);
        $updateSql .= ",description='" . $description . "'";
    }
    $color = getDefaultVal($POST_JSON['remoteClientWindowColor'], "00");
    if ($color != "00") {
        if ($color == 256) {
            $color = 0;
        } else if ($color == 15) {
            $color = 1;
        } else if ($color == 16) {
            $color = 2;
        } else if ($color == 24) {
            $color = 3;
        } else if ($color == 32) {
            $color = 4;
        }
        $updateSql .= ",color=" . $color;
    }

    $ico_name = getDefaultVal($POST_JSON['icoName'], "00");
    if ($ico_name != "00") {
        $ico_name = utf8ToGbk($ico_name);
        $updateSql .= ",ico_name='" . $ico_name . "'";
    }

    $ico = getDefaultVal($POST_JSON['ico'], "00");
    if ($ico != "00") {
        $ico = getDefaultVal(addslashes(hex2bin($ico)), "");
        $updateSql .= ",ico='" . $ico . "'";
    }

    $icoico = getDefaultVal($POST_JSON['icoico'], "00");
    if ($icoico != "00") {
        $icoico = getDefaultVal(addslashes(hex2bin($icoico)), "");
        $updateSql .= ",icoico='" . $icoico . "'";
    }

    $bmp = getDefaultVal($POST_JSON['bmp'], "00");
    if ($bmp != "00") {
        $bmp = getDefaultVal(addslashes(hex2bin($bmp)), "");
        $updateSql .= ",bmp='" . $bmp . "'";
    }

    $enable_ssl = getDefaultVal($POST_JSON['ifSSLAndTSLUsed'], "00");
    if ($enable_ssl != "00") {
        $updateSql .= ",enable_ssl=" . $enable_ssl;
    }

    $redirect_audio = getDefaultVal($POST_JSON['ifSoundMap'], "00");
    if ($redirect_audio != "00") {
        $updateSql .= ",redirect_audio=" . $redirect_audio;
    }

    $redirect_driver = getDefaultVal($POST_JSON['ifDiskMap'], "00");
    if ($redirect_driver != "00") {
        $updateSql .= ",redirect_driver=" . $redirect_driver;
    }

    $redirect_printer = getDefaultVal($POST_JSON['ifDAMap'], "00");
    if ($redirect_printer != "00") {
        $updateSql .= ",redirect_printer=" . $redirect_printer;
    }

    $redirect_port = getDefaultVal($POST_JSON['ifLptComMap'], "00");
    if ($redirect_port != "00") {
        $updateSql .= ",redirect_port=" . $redirect_port;
    }

    $redirect_usb = getDefaultVal($POST_JSON['ifUsbMap'], "00");
    if ($redirect_usb != "00") {
        $updateSql .= ",redirect_usb=" . $redirect_usb;
    }

    $redirect_clip = getDefaultVal($POST_JSON['ifShareBoardMap'], "00");
    if ($redirect_clip != "00") {
        $updateSql .= ",redirect_clip=" . $redirect_clip;
    }

    $redirect_salver = getDefaultVal($POST_JSON['ifTrayMap'], "00");
    if ($redirect_salver != "00") {
        $updateSql .= ",redirect_salver=" . $redirect_salver;
    }

    $redirect_DDE = getDefaultVal($POST_JSON['ifDDEMap'], "00");
    if ($redirect_DDE != "00") {
        $updateSql .= ",redirect_DDE=" . $redirect_DDE;
    }

    $redirect_ime = getDefaultVal($POST_JSON['ifTypeWritingMap'], "00");
    if ($redirect_ime != "00") {
        $updateSql .= ",redirect_ime=" . $redirect_ime;
    }

    $wait_printer_create = getDefaultVal($POST_JSON['ifNotWaitingDACreatedWhenAppRunning'], "00");
    if ($wait_printer_create != "00") {
        $updateSql .= ",wait_printer_create=" . $wait_printer_create;
    }

    $ifLimitAppNumInEnvironment = getDefaultVal($POST_JSON['ifNotWaitingDACreatedWhenAppRunning'], "00");
    if ($ifLimitAppNumInEnvironment != "00") {
        $updateSql .= ",ifLimitAppNumInEnvironment=" . $ifLimitAppNumInEnvironment;

        $app_session_count = 0;
        if ($ifLimitAppNumInEnvironment == 1) {
            $app_session_count = getDefaultVal($POST_JSON['appLimitNum'], "00");
            if ($app_session_count != "00") {
                $updateSql .= ",app_session_count=" . $app_session_count;
            }
        }
    }

    $each_user_one_session = getDefaultVal($POST_JSON['eachUserOneSession'], "00");
    if ($each_user_one_session != "00") {
        $updateSql .= ",each_user_one_session=" . $each_user_one_session;
    }

    $cpu_level = getDefaultVal($POST_JSON['cpuPR'], "00");
    if ($cpu_level != "00") {
        if ($cpu_level > 0) {
            $cpu_level = $cpu_level - 1;
        }
        $updateSql .= ",cpu_level=" . $cpu_level;
    }

    $droit_list = getDefaultVal($POST_JSON['userIdStr'], "00");
    if ($droit_list != "00") {
        $userIdArr = explode(",", $droit_list);
        $droit_list = "";
        foreach ($userIdArr as $userId) {
            $droit_list = $droit_list . "<" . $userId . ">";
        }

        $updateSql .= ",droit_list='" . $droit_list . "'";
    }

    $alert_policy_id = getDefaultVal($POST_JSON['alermPolicyIdStr'], "00");
    if ($alert_policy_id != "00") {
        $updateSql .= ",alert_policy_id='" . $alert_policy_id . "'";
    }

    $app_parm = getDefaultVal($POST_JSON['runParam'], "00");
    if ($app_parm != "00") {
        $updateSql .= ",app_parm='" . $app_parm . "'";
    }

    $SavePrinterPram = getDefaultVal($POST_JSON['ifDAParamsSaved'], "00");
    if ($SavePrinterPram != "00") {
        $updateSql .= ",SavePrinterPram=" . $SavePrinterPram;
    }

    $UseScript = getDefaultVal($POST_JSON['ifUsedScript'], "00");
    if ($UseScript != "00") {
        $UseScript = utf8ToGbk($UseScript);
        $updateSql .= ",UseScript=" . $UseScript;
    }

    $LoginScript = getDefaultVal($POST_JSON['initScriptContent'], "00");
    if ($LoginScript != "00") {
        $LoginScript = utf8ToGbk($LoginScript);
        $updateSql .= ",LoginScript='" . $LoginScript . "'";
    }

    $LogoutScript = getDefaultVal($POST_JSON['endScriptContent'], "00");
    if ($LogoutScript != "00") {
        $LogoutScript = utf8ToGbk($LogoutScript);
        $updateSql .= ",LogoutScript='" . $LogoutScript . "'";
    }

    $ShareSession = getDefaultVal($POST_JSON['enbleSessionSharing'], "00");
    if ($ShareSession != "00") {
        $updateSql .= ",ShareSession=" . $ShareSession;
    }

    $isx64 = getDefaultVal($POST_JSON['if64SessionEnvironment'], "00");
    if ($isx64 != "00") {
        $updateSql .= ",isx64=" . $isx64;
    }

    $ChgMode = getDefaultVal($POST_JSON['enbleTCCompatibilityMode'], "00");
    if ($ChgMode != "00") {
        $updateSql .= ",ChgMode=" . $ChgMode;
    }

    $WaitOtherProc = getDefaultVal($POST_JSON['ifWaitAllSessionProcessEnding'], "00");
    if ($WaitOtherProc != "00") {
        $updateSql .= ",WaitOtherProc=" . $WaitOtherProc;
    }

    $redirect_desktop = getDefaultVal($POST_JSON['ifMapDesktop'], "00");
    if ($redirect_desktop != "00") {
        $updateSql .= ",redirect_desktop=" . $redirect_desktop;
    }

    $redirect_mydoc = getDefaultVal($POST_JSON['ifMapMyDocument'], "00");
    if ($redirect_mydoc != "00") {
        $updateSql .= ",redirect_mydoc=" . $redirect_mydoc;
    }

    $icoTimeUrl = getDefaultVal($POST_JSON['icoTimeUrl'], "00");
    if ($icoTimeUrl != "00") {
        $icoTimeUrl = utf8ToGbk($icoTimeUrl);
        $updateSql .= ",icoTimeUrl='" . $icoTimeUrl . "'";
    }

    $updateSql = substr($updateSql, 1);
    $updateUserAndAppSql = " app_name='" . $name . "'";
    $updateUserAndAppSql = "update cuser_application set " . $updateUserAndAppSql . " where app_id='" . $app_id . "'";

    $userAndAppResult = mysql_query($updateUserAndAppSql, $DSCon);
    if (!$userAndAppResult) {
        write_log("{'editApp':'更新cuser_application表失败，updateUserAndAppSql:'.$updateUserAndAppSql}");
//        exitErrorJson("编辑应用失败！");
    }
    $updateAppSql = "update application set " . $updateSql . " where app_id='" . $app_id . "'";
    $result = mysql_query($updateAppSql, $DSCon);

    if (!$result) {
        write_log("{'editApp':'编辑应用失败，updateAppSql:'.$updateAppSql}");
        exitErrorJson("编辑应用失败！");
    } else {
        if ($updateAppServerSql != "") {
            $updateAppServerSql = substr($updateAppServerSql, 1);
            $updateAppServerSql = "update app_server set " . $updateAppServerSql . " where AppId='" . $app_id . "'";
            $result = mysql_query($updateAppServerSql, $DSCon);
            if (!$result) {
                write_log("{editApp:'编辑应用失败'，updateAppServerSql:'$updateAppServerSql'}");
                exitErrorJson("编辑应用失败！");
            }
        }

        header('Content-Type:application/json; charset=utf-8');
        $data = array('result' => 1, 'msg' => urlencode("编辑应用成功"));
        $encodeStr = urldecode(json_encode($data));
        echo $encodeStr;
        exit;
    }
} else if ($cmd == "delApp") {
    $appId = $requestObj['appId'];
    if (!isset($appId) || empty($appId)) {
        write_log("{'delApp':'应用ID不可为空，appId:'.$appId}");
        exitErrorJson('应用ID不可为空');
    }

    $result = mysql_query("select * from application where app_Id='" . $appId . "'", $DSCon);
    if (mysql_num_rows($result) < 1) {
        write_log("{'delApp':'未查询到符合条件的应用，appId:'.$appId}");
        exitErrorJson('未查询到符合条件的应用');
    }
    $row = mysql_fetch_row($result);

    $Content = $row['3'];

    $VirtualDiskServer = $COMCASWEB->getfarminfo("VirtualDiskServer");
    $hostIp = $_SERVER['SERVER_ADDR'] != "127.0.0.1" ? $_SERVER['SERVER_ADDR'] : $VirtualDiskServer;
    $serverSql = "select server.banport,serverip.ip from server,serverip where server.ServerId=serverip.serverid and (serverip.ip='" . $hostIp . "' or serverip.ip='127.0.0.1')";
    $result1 = mysql_query($serverSql, $DSCon);
    if (mysql_num_rows($result1) < 1) {
        write_log("{'delApp':'未查询到符合条件的服务器信息，serverSql:'.$serverSql}");
        exitErrorJson('未查询到符合条件的服务器信息');
    }
//    $row = mysql_fetch_row($result1);
//    $hostPort = $row[0];
//    $Command = "1903";
//
//    $Key = rand(0, 65535);
//    $Content = cmnEncryptString(base64_encode(InnerCryptNEW($Content, $Key, 10086, 2010)), '6746');
//    $URL = "http://{$hostIp}:{$hostPort}/BanRequest?&cmd={$Command}&param={$Content}&key={$Key}";
//
//    //初始化
//    $ch = curl_init();
//    //设置选项，包括URL
//    curl_setopt($ch, CURLOPT_URL, $URL);
//    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); //设置curl_exec()获取的信息以文件流的形式返回，而不是直接输出。
//    curl_setopt($ch, CURLOPT_HEADER, 0);  //设置是否返回http头信息
//    //执行并获取HTML文档内容
//    $output = curl_exec($ch);
//    //释放curl句柄
//    curl_close($ch);
//testLog(intval($row));
    if (intval($row) > 0) {
        $delAppServerSql = "delete from app_server where AppId='" . $appId . "'";
        $result2 = mysql_query($delAppServerSql, $DSCon);
        if (!$result2) {
            write_log("{'delApp':'删除应用失败，delAppServerSql:'.$delAppServerSql}");
            exitErrorJson("删除应用失败");
        }

        $delAppSql = "delete from application where app_id='" . $appId . "'";
        $result3 = mysql_query($delAppSql, $DSCon);
        if (!$result3) {
            write_log("{'delApp':'删除应用失败，delAppSql:'.$delAppSql}");
            exitErrorJson("删除应用失败");
        }

        header('Content-Type:application/json; charset=utf-8');
        $data = array('result' => 1, 'msg' => urlencode("删除应用成功"));
        $encodeStr = urldecode(json_encode($data));
        echo $encodeStr;
        exit;
    } else {
        write_log("{'delApp':'删除应用失败，row:'.$row}");
        exitErrorJson('删除应用失败');
    }
} else if ($cmd == "deployAppToUser") {
    $userId = $requestObj['userId'];
    if (!isset($userId) || empty($userId)) {
        write_log("{'deployAppToUser':'用户ID不可为空，userId:'.$userId}");
        exitErrorJson('用户ID不可为空');
    }

    $appIdStr = $requestObj['appIdStr'];
    if (!isset($appIdStr) || empty($appIdStr)) {
        write_log("{'deployAppToUser':'应用ID字符串不可为空，appIdStr:'.$appIdStr}");
        exitErrorJson('应用ID字符串不可为空');
    }

    $appIdArr = explode(",", $appIdStr);
    if (count($appIdArr) == 0) {
        write_log("{'deployAppToUser':'参数非法，appIdStr:'.$appIdStr}");
        exitErrorJson('参数非法');
    }

    foreach ($appIdArr as $appId) {
        $selectAppSql = "select * from application where app_Id='" . $appId . "'";
        $result = mysql_query($selectAppSql, $DSCon);
        if (mysql_num_rows($result) < 1) {
            write_log("{'deployAppToUser':'未查询到符合条件的应用，selectAppSql:'.$selectAppSql}");
            exitErrorJson('未查询到符合条件的应用');
        }
        $row = mysql_fetch_row($result);

        $userIdStr = $row[38];
        if (empty($userIdStr)) {
            $userIdStr = $userIdStr . "<" . $userId . ">";
        } else {
            //不包含
            if (strpos($userIdStr, $userId) === false) {
                $userIdStr = $userIdStr . "<" . $userId . ">";
            }
        }

        $updateAppSql = "update application set droit_list='" . $userIdStr . "' where app_id='" . $appId . "'";
        $result = mysql_query($updateAppSql, $DSCon);
        if (!$result) {
            write_log("{'deployAppToUser':'分配应用给用户失败，updateAppSql:'.$updateAppSql}");
            exitErrorJson('分配应用给用户失败');
        }
    }

    header('Content-Type:application/json; charset=utf-8');
    $data = array('result' => 1, 'msg' => urlencode("分配应用给用户成功"));
    $encodeStr = urldecode(json_encode($data));
    echo $encodeStr;
    exit;
} else if ($cmd == "deployUserToApp") {
    $requestObj = $HTTP_RAW_POST_DATA ? json_decode($HTTP_RAW_POST_DATA, true) : $requestObj;
    $appId = $requestObj['appId'];
//    testLog("appId=" . $appId);
    if (!isset($appId) || empty($appId)) {
        write_log("{'deployUserToApp':'应用ID不可为空，appId:'.$appId}");
        exitErrorJson('应用ID不可为空');
    }
    $userIdStr = $requestObj['userIdStr'];
//    testLog("userIdStr=".$userIdStr);
//    if (!isset($userIdStr) || empty($userIdStr)) {
//        write_log("{'deployUserToApp':'用户ID字符串不可为空，userIdStr:'.$userIdStr}");
//        exitErrorJson('用户ID字符串不可为空');
//    }
    $userIdArr = is_array($userIdStr) ? $userIdStr : explode(",", $userIdStr);
//    testLog(count($userIdArr));
//    if (count($userIdArr) == 0) {
//        write_log("{'deployUserToApp':'参数非法，userIdStr:'.$userIdStr}");
//        exitErrorJson('参数非法');
//    }
    $selectAppSql = "select * from application where app_Id='" . $appId . "'";
    $result = mysql_query($selectAppSql, $DSCon);
    if (mysql_num_rows($result) < 1) {
        write_log("{'deployUserToApp':'应用不存在，selectAppSql:'.$selectAppSql}");
        exitErrorJson('应用不存在');
    }
    $resultSelectAppSql = mysql_fetch_row($result);
//    $row = mysql_fetch_row($result);
//    $userIdStr = $row[38];
//    testLog($userIdArr);
//    testLog('userIdStr=' . $userIdStr);
    $droit_list = "";
    $droit_list = getAdminUserId();
    if ($droit_list) {
        $droit_list = "<" . $droit_list . ">";
    }
//    testLog($droit_list);
    if ($userIdStr != "00") {
        $userIdArr = is_array($userIdStr) ? $userIdStr : explode(",", $userIdStr);
        foreach ($userIdArr as $userId) {
            if ($userId) {
                $droit_list .= "<" . $userId . ">";
            }
        }
    }
//  testLog($droit_list);
    $updateAppSql = "update application set droit_list='" . $droit_list . "' where app_id='" . $appId . "'";

    $result = mysql_query($updateAppSql, $DSCon);
    if (!$result) {
        write_log("{'deployUserToApp':'把应用分配给用户失败，updateAppSql:'.$updateAppSql}");
        exitErrorJson('把应用分配给用户失败');
    }

//    if (sizeof($userIdArr) > 0) {
//        foreach ($userIdArr AS $K => $v) {
//            $selectAppSqlTmp = "SELECT ca.user_id, a.name  FROM `application` a left JOIN cuser_application ca ON ca.app_id = a.app_id  WHERE (a.app_id='" . $appId . "' AND ca.user_id = '" . $v . "') ";
////            testLog($selectAppSqlTmp);
//            $result = mysql_query($selectAppSqlTmp, $DSCon);
//            $rowUserName = mysql_num_rows($result);
////            testLog($rowUserName);
//            if ($rowUserName < 1) {
//
//                $resultSelectAppSqlTmp = mysql_fetch_row($result);
//
//                $addUserApplicationSql = "insert cuser_application (user_id, app_id, app_name, time_apply, audited ,time_audit) values
//            ( '" . $v . "','" . $appId . "','" . $resultSelectAppSql[1] . "','" . date("Y-m-d H:m:s", time() + 8 * 3600) . "', 1 ,'" . date("Y-m-d H:m:s", time() + 8 * 3600) . "');";
////                testLog("add=" . $addUserApplicationSql);
//                $result2 = mysql_query($addUserApplicationSql, $DSCon);
//            };
//        }
//    } else {
//        $deletetAppSql = "DELETE FROM cuser_application WHERE app_id='" . $appId . "'";
//
//        $result = mysql_query($deletetAppSql, $DSCon);
//    }
//
//    $appListArr = array();
//    $appArr = array();
//    if (sizeof($userIdArr) > 0) {
//        $result = mysql_query("SELECT ca.user_id  FROM `cuser_application` ca  WHERE (ca.app_id = '" . $appId . "') ", $DSCon);
////        testLog("SELECT ca.user_id  FROM `cuser_application` ca  WHERE (ca.app_id = '" . $appId . "') ");
//        $rowUserApplication = mysql_num_rows($result);
////        testLog($rowUserApplication);
//        if ($rowUserApplication > 0 && count($userIdArr) < $rowUserApplication) {
//            $j = 0;
//            for (; $j < $rowUserApplication; $j++) {
//                $row = mysql_fetch_row($result);
//                if ($row[0]) {
//                    $appArr[$j] = $row[0];
//                }
//            }
//        }
//
//        if (sizeof($appArr) > 0 && count($userIdArr) < $appArr) {
//            $result = array_diff($appArr, $userIdArr);
//            sort($result);
//            testLog($result);
//            testLog(count($result));
//            foreach ($result AS $v) {
//                if ($v) {
//
//                    $selectAppSql = "DELETE FROM cuser_application WHERE app_id='" . $appId . "' AND user_id='" . $v . "'";
//
//                    $result = mysql_query($selectAppSql, $DSCon);
//                }
//            }
//        }
//    }
    header('Content-Type:application/json; charset=utf-8');
    $data = array('result' => 1, 'msg' => urlencode("授权成功"));
    $encodeStr = urldecode(json_encode($data));
    echo $encodeStr;
    exit;
} else if ($cmd == "getAppList") {
    $pageNo = $requestObj['pageNo'];
    $pageSize = $requestObj['pageSize'];
    $userName = $requestObj['user'];
    $VirtualDiskServerTemp = $COMCASWEB->getfarminfo("VirtualDiskServer");
//    $serverIpTemp = gethostbyname($_ENV[COMPUTERNAME]) ? gethostbyname($_ENV[COMPUTERNAME]) : $_SERVER['SERVER_ADDR'];
    $serverIpTemp = getfarminfofromdb("LicenseServerURL") ? str_replace('http://', '', getfarminfofromdb("LicenseServerURL")) : gethostbyname($_ENV[COMPUTERNAME]);
    $getAppWebPortSql = "select server.WebPort from server,serverip where  server.ServerID=serverip.ServerId AND serverip.ip='" . $serverIpTemp . "'" . " OR serverip.ip='127.0.0.1'";
//    testLog($getAppWebPortSql);
//    if ($hostIp[1]) {
//        $getApplicationListSql .= " AND serverip.ip !='" . $hostIp[1] . "'";
//    }
//    testLog($getApplicationListSql);
    $result = mysql_query($getAppWebPortSql, $DSCon);
    $rows = mysql_num_rows($result);
    if ($rows < 1) {
        write_log("{'getAppWebPortSql':'未查询到符合条件的服务器IP、端口数据，getAppWebPortSql:'.$getAppWebPortSql}");
        exitErrorJson('未查询到符合条件的服务器IP、端口数据');
    }

    $WebPortStr = mysql_fetch_row($result);
//    testLog('WebPortStr='.$WebPortStr[0]);
    $nameStr = getDefaultVal($requestObj['nameStr'], "");
//    $likeStr = "where app_id in (select AppId from app_server where ServerId=(select ServerId from serverip where ip='" . $serverIpTemp . "'))";
    $likeStr = "where ";
    if (!empty($nameStr)) {
        $likeStr = $likeStr . " and name like '%" . utf8ToGbk($nameStr) . "%'";
    }

    if (!empty($userName)) {
        $result = mysql_query("SELECT user_id FROM cuser WHERE name='" . $userName . "'", $DSCon);
        if (mysql_num_rows($result) < 1) {
            write_log("{'getUserInfo':'未查询到符合条件的用户，userName:'.$userName}");
            exitErrorJson('未查询到符合条件的用户');
        }
        $row = mysql_fetch_row($result);
        if (isset($row[0]) && !empty($row[0])) {
            $likeStr = $likeStr . "  droit_list LIKE '%<" . utf8ToGbk($row[0]) . ">%'";
        }
    }
    //计算实际总记录数量
    $resultTotal = mysql_query("select count(0) as totalSize from application " . $likeStr, $DSCon);
    $rowTotal = mysql_fetch_row($resultTotal);
    $totalSize = $rowTotal[0];

    $getAppListSql = "select * from application " . $likeStr;

    $pageNo = getDefaultVal($requestObj['pageNo'], 1);
    $pageSize = getDefaultVal($requestObj['pageSize'], 20);
    $totalPage = ceil($totalSize / $pageSize);
    if ($pageNo > $totalPage) {
        $pageNo = $totalPage;
    }
    $start = ($pageNo - 1) * $pageSize;
    $getAppListSql = $getAppListSql . "limit " . $start . "," . $pageSize;
//    testLog($getAppListSql);
    $result = mysql_query($getAppListSql, $DSCon);
    $rows = mysql_num_rows($result);
    if ($rows < 1) {
        write_log("{'getAppList':'未查询到符合条件的应用，getAppListSql:'.$getAppListSql}");
        exitErrorJson('未查询到符合条件的应用');
    }

    $appListArr = array();
    $i = 0;
    for (; $i < $rows; ++$i) {
        $row = mysql_fetch_row($result);
        $appArr = array();
        $appId = $row['0'];
        $appArr['appId'] = $appId;
//        $appArr['name'] = gbkToUtf8Encode($row['1']);
        $appArr['name'] = iconv("GBK", "UTF-8//IGNORE", $row['1']);
        if ($row['16'] == 0) {
            $appArr['type'] = "CS";
        } else if ($row['16'] == 3) {
            $appArr['type'] = "BS";
        }
//        $appArr['desc'] = gbkToUtf8Encode($row['6']);
        $appArr['desc'] = iconv("GBK", "UTF-8//IGNORE", $row['6']);
        $appArr['enable'] = $row['46'];


        if (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == "on") {
            $urlRap = "https://" . $_SERVER['HTTP_HOST'];
        } else {
            $interfaceArr = parse_ini_file($WWWRoot . "/interface.ini", TRUE);
            $publicIp = $interfaceArr["PublicIp"]["publicIp"];
//            $urlRap = $serverIpTemp ? "http://" . $serverIpTemp : "http://" . $_SERVER['HTTP_HOST'];
            $urlRap = ($publicIp) ? "http://" . $publicIp : "http://" . $serverIpTemp . ':' . $WebPortStr[0];
        }
//        $appArr['appIcon'] = $row['21'] ? base64_encode($row['21']) : $urlrap . "/ico/ICO_{$appId}.bmp";
//        $appArr['appIcon'] = $urlrap . "/Public/icon/{$appId}.png";
        $appArr['appIcon'] = strtoupper(bin2hex($row['21'] ? $row['21'] : ($row['56'] ? $row['56'] : $row['57'])));

        $urlRap .= "/RAPAgent.XGI?CMD=GETApplication&AppID={$appId}&Language=ZH-CN&User={$adminName}&PWD={$adminPwd}&AuthType=0";
//        testLog($urlRap . '------AppID=' . $appId);
        $appArr['openUrl'] = "RAP://" . bin2hex(base64_encode(acrypt("{$urlRap}")));

        $appListArr[$i] = $appArr;
    }

    $row = mysql_fetch_row($result);

    header('Content-Type:application/json; charset=utf-8');
    $data = array('result' => 1, 'appList' => $appListArr);
    $encodeStr = urldecode(json_encode($data));
    echo $encodeStr;
    exit;
} else if ($cmd == "getApplication") {
    $appId = $requestObj['appId'];
    if (!isset($appId) || empty($appId)) {
        write_log("{'getApplication':'应用ID不可为空，appId:'.$appId}");
        exitErrorJson('应用ID不可为空');
    }

    $selectAppSql = "select * from application where app_Id='" . $appId . "'";
    $result = mysql_query($selectAppSql, $DSCon);
    if (mysql_num_rows($result) < 1) {
        write_log("{'getApplication':'未查询到符合条件的应用，selectAppSql:'.$selectAppSql}");
        exitErrorJson('未查询到符合条件的应用');
    }
    $row = mysql_fetch_row($result);

    header('Content-Type:application/json; charset=utf-8');
    $appArr = array();
    $appArr['appId'] = $row['0'];
    $appArr['name'] = gbkToUtf8Encode($row['1']);
    $appArr['appPath'] = gbkToUtf8Encode($row['2']);
    $appArr['appWorkDir'] = gbkToUtf8Encode($row['3']);
    $appArr['description'] = gbkToUtf8Encode($row['6']);
    $appArr['icoName'] = gbkToUtf8Encode($row['20']);
    $appArr['icoico'] = addslashes(bin2hex($row['56']));
    $appArr['icoTimeUrl'] = gbkToUtf8Encode($row['68']);

    if ($row['16'] == 0) {
        $appArr['appType'] = "CS";
    } else if ($row['16'] == 3) {
        $appArr['appType'] = "BS";
    }

    if (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == "on") {
        $urlrap = "https://" . $_SERVER['HTTP_HOST'];
    } else {
        $urlrap = "http://" . $_SERVER['HTTP_HOST'];
    }

    $urlrap .= "/RAPAgent.XGI?CMD=GETApplication&AppID={$appId}&Language=ZH-CN&User={$adminName}&PWD={$adminPwd}&AuthType=0";
    $appArr['openUrl'] = "RAP://" . bin2hex(base64_encode(acrypt("{$urlrap}")));

    $selectAppSql = "select * from app_server where appId='" . $appId . "'";
    $result1 = mysql_query($selectAppSql, $DSCon);
    if (mysql_num_rows($result1) < 1) {
        write_log("{'getApplication':'未查询到相应的应用服务器关系，selectAppSql:'.$selectAppSql}");
        exitErrorJson('未查询到相应的应用服务器关系');
    }

    $rows1 = mysql_num_rows($result1);
    $serverIds = "";
    $i = 0;
    for (; $i < $rows1; ++$i) {
        $row1 = mysql_fetch_row($result1);
        $serverIds .= "," . $row1['2'];
    }
    $serverIds = substr($serverIds, 1);
    $appArr['serverId'] = $serverIds;

    /*
    $selectServerSql = "select * from server where serverId='".$appArr['serverId']."'";
    $result2 = mysql_query( $selectServerSql, $DSCon );
    if ( mysql_num_rows( $result2 ) < 1 )
    {
        write_log("{'getApplication':'未查询到相应的服务器，selectServerSql:'.$selectServerSql}");
        exitErrorJson('未查询到相应的服务器');
    }
    $row2 = mysql_fetch_row( $result2 );
    $appArr['computerName'] = $row2['2'];
    */

    $data = array('result' => 1, 'app' => $appArr);
    $encodeStr = urldecode(json_encode($data));
    echo $encodeStr;
    exit;
} else if ($cmd == "getAppIcon") {
//    testLog($requestObj);
        $exePath = $requestObj['exePath'];
//    testLog('exePath1=' . $exePath);
        $exePath = urldecode($exePath);
//    testLog('exePath89=' . $exePath);
        if (preg_match("/([\x81-\xfe][\x40-\xfe])/", $exePath, $match)) {
//        $exePathPan = iconv("UTF-8", "GBK//IGNORE", $exePath);
//        $exePath = $exePathPan;
            if (!is_file($exePathPan)) {
//            $WWWRoot = $_SERVER['DOCUMENT_ROOT'];
//            $exePath = $WWWRoot . '/static/images/applistcommon.png';
//            testLog("focus chinese ");
            }
        } else {
//        if (!is_file($exePath)) {
//            $WWWRoot = $_SERVER['DOCUMENT_ROOT'];
//            $exePath = $WWWRoot . '/static/images/applistcommon.png';
//        }
//        testLog("focus english");
        }
        $iconArr1 = array();
        $appId = $requestObj['appId'];
        if (isset($appId) && !empty($appId)) {
            $selectAppSql = "select * from application where app_Id='" . $appId . "'";
            $result = mysql_query($selectAppSql, $DSCon);
            if (mysql_num_rows($result) < 1) {
                write_log("{'getAppIcon':'未查询到符合条件的应用，selectAppSql:'.$selectAppSql}");
                exitErrorJson('未查询到符合条件的应用');
            }
            $row = mysql_fetch_row($result);

            $iconArr1['icoico'] = addslashes(bin2hex($row['56']));
            $iconArr1['icoTimeUrl'] = $row['68'];
            header('Content-Type:application/json; charset=utf-8');
            $data = array('result' => 0, 'icoList' => $iconArr1);
            $encodeStr = urldecode(json_encode($data));
            echo $encodeStr;
            exit;
        }
        $Content = $exePath;

        $VirtualDiskServer = $COMCASWEB->getfarminfo("VirtualDiskServer");
        $hostIp = $_SERVER['SERVER_ADDR'] != "127.0.0.1" ? $_SERVER['SERVER_ADDR'] : $VirtualDiskServer;

        $selectServerSql = "select server.banport,serverip.ip from server,serverip where server.ServerId=serverip.serverid and (serverip.ip='" . $hostIp . "' or serverip.ip='127.0.0.1')";
        $result = mysql_query($selectServerSql, $DSCon);
        if (mysql_num_rows($result) < 1) {
            write_log("{'getAppIcon':'未查询到符合条件的服务器信息，selectServerSql:'.$selectServerSql}");
            exitErrorJson('未查询到符合条件的服务器信息');
        }
        $row = mysql_fetch_row($result);
        $hostPort = $row[0];
        $Command = "1904";

        $Key = rand(0, 65535);

//    testLog('Content=' . $Content);
        $Content = cmnEncryptString(base64_encode(InnerCryptNEW($Content, $Key, 10086, 2010)), '6746');
        $URL = "http://{$hostIp}:{$hostPort}/BanRequest?&cmd={$Command}&param={$Content}&key={$Key}";
//    testLog('tupian=' . $URL);
        //初始化
        $ch = curl_init();
        //设置选项，包括URL
        curl_setopt($ch, CURLOPT_URL, $URL);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); //设置curl_exec()获取的信息以文件流的形式返回，而不是直接输出。
        curl_setopt($ch, CURLOPT_HEADER, 0);  //设置是否返回http头信息
        //执行并获取HTML文档内容
        $output = curl_exec($ch);
//    testLog('output='.$output);
        //释放curl句柄
        curl_close($ch);
//    testLog('output=' . $output);
        //结果
        $iconResultArr = explode("\n", $output);
        if (count($iconResultArr) > 1 && $iconResultArr[0]) {
            $resultCode = intval($iconResultArr[0]);
            if ($resultCode == 0) {
                header('Content-Type:application/json; charset=utf-8');

                $iconArr = explode(",", $iconResultArr[1]);
                $icoico = $iconArr[0];
                $bmp = $iconArr[1];
                $ico = $iconArr[2];

                $iconArr1["icoico"] = $icoico;
                $iconArr1["bmp"] = $bmp;
                $iconArr1["ico"] = str_replace("+", "--", base64_encode(hex2bin(strtolower($ico))));
                $iconArr1["y_ico"] = strtolower($ico);
//            testLog("HHHHHHHHHH_2");
//            testLog("1ico=".$tmp=base64_encode(hex2bin(strtolower($ico))));
//            testLog("2ico=".$iconArr1["ico"]=str_replace("+","--",$tmp));
//            testLog("HHHHHHHHHH_1");
                $icoPath = $WWWRoot . "/ico/";
                $PngPath = $WWWRoot . "/Public/icon/";
                $fileMd5Name = md5(time() . mt_rand(10, 99)) . ".bmp";
                $fileMd5PngName = md5(time() . mt_rand(10, 99) . time()) . ".png";
                $filePathName = $icoPath . $fileMd5Name;
                $filePngPathName = $PngPath . $fileMd5PngName;
//            hexToFile($bmp, $filePathName);
//            hexToFile($ico, $filePngPathName);
//            if (file_exists($filePngPathName)) {
//                $selectServerSql = "select server.webport,serverip.ip from server,serverip where server.ServerId=serverip.serverid and (serverip.ip='" . $hostIp . "'  or serverip.ip='127.0.0.1')";
//                $result = mysql_query($selectServerSql, $DSCon);
//                if (mysql_num_rows($result) < 1) {
//                    write_log("{'getAppIcon':'未查询到符合条件的服务器信息，selectServerSql:'.$selectServerSql}");
//                    exitErrorJson('未查询到符合条件的服务器信息');
//                }
//                $row = mysql_fetch_row($result);
//                $webPort = $row[0];
//
////                $iconArr1["icoTimeUrl"] = "http://{$hostIp}:{$webPort}/ico/{$fileMd5Name}";
//                $iconArr1["icoTimeUrl"] = "http://{$hostIp}:{$webPort}/Public/icon/{$fileMd5PngName}";
//            } else {
//                write_log("{'getAppIcon':'应用图标临时文件生成失败，'.$filePngPathName.'不存在'}");
//                exitErrorJson('应用图标临时文件生成失败');
//            }

                header('Content-Type:application/json; charset=utf-8');
                $data = array('result' => 1, 'icoList' => $iconArr1);
                $encodeStr = urldecode(json_encode($data));
                echo $encodeStr;
                exit;
            } else if ($resultCode == 1) {
                write_log("{'getAppIcon':'路径不正确,output:'.$output}");
                exitErrorJson('路径不正确');
            } else if ($resultCode == 2) {
                write_log("{'getAppIcon':'ico文件大小超过64*64,output:'.$output}");
                exitErrorJson('ico文件大小超过64*64');
            } else if ($resultCode == 3) {
                write_log("{'getAppIcon':'应用程序无图标信息,output:'.$output}");
                exitErrorJson('应用程序无图标信息');
            } else {
                write_log("{'getAppIcon':'查询应用图标失败,output:'.$output}");
                exitErrorJson('查询应用图标失败');
            }
        } else {
            write_log("{'getAppIcon':'查询应用图标失败,output:'.$output}");
            exitErrorJson('查询应用图标失败');
        }
    } else if ($cmd == "getRegistrationInformation") {

    $VirtualDiskServer = $COMCASWEB->getfarminfo("VirtualDiskServer");
    $hostIp = $_SERVER['SERVER_ADDR'] != "127.0.0.1" ? $_SERVER['SERVER_ADDR'] : $VirtualDiskServer;

    $selectServerSql = "select server.banport,serverip.ip from server,serverip where server.ServerId=serverip.serverid and (serverip.ip='" . $hostIp . "' or serverip.ip='127.0.0.1')";
    $result = mysql_query($selectServerSql, $DSCon);
    if (mysql_num_rows($result) < 1) {
        write_log("{'getAppIcon':'未查询到符合条件的服务器信息，selectServerSql:'.$selectServerSql}");
        exitErrorJson('未查询到符合条件的服务器信息');
    }
    $row = mysql_fetch_row($result);
    $hostPort = $row[0];
    $Command = "1908";

    $Key = rand(0, 65535);

//    testLog('Content=' . $Content);
    $Content = "realor";
    $Content = cmnEncryptString(base64_encode(InnerCryptNEW($Content, $Key, 10086, 2010)), '6746');
    $URL = "http://{$hostIp}:{$hostPort}/BanRequest?&cmd={$Command}&param={$Content}&key={$Key}";
//    testLog('register='.$URL);
    //初始化
    $ch = curl_init();
    //设置选项，包括URL
    curl_setopt($ch, CURLOPT_URL, $URL);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); //设置curl_exec()获取的信息以文件流的形式返回，而不是直接输出。
    curl_setopt($ch, CURLOPT_HEADER, 0);  //设置是否返回http头信息
    //执行并获取HTML文档内容
    $output = curl_exec($ch);
    //释放curl句柄
    curl_close($ch);
//    testLog('output=' . $output);
    //结果
    $registerResultArr = explode(",", $output);
//    str_replace("\r\n","",$registerResultArr[0])
    ($registerResultArr[0] = str_replace(PHP_EOL, '', $registerResultArr[0]));
    if (count($registerResultArr) > 1 && $registerResultArr[0]) {
        $resultCode = intval($registerResultArr[0]);
        if ($resultCode == 01) {
            header('Content-Type:application/json; charset=utf-8');
            $registerArr1["versionType"] = gbkToUtf8Encode($registerResultArr[3]);
            if ($registerResultArr[1] == -1) {
                $registerArr1["registrationStatus"] = "演示";
            } elseif ($registerResultArr[1] == 0) {
                $registerArr1["registrationStatus"] = "试用";
            } elseif ($registerResultArr[1] == 1) {
                $registerArr1["registrationStatus"] = "注册版";
            }
            $registerArr1["registerToNoteName"] = gbkToUtf8Encode($registerResultArr[11]);
            $registerArr1["registrationNumber"] = ($registerResultArr[12]);
            $registerArr1["dateOfAuthorization"] = $registerResultArr[10];
            $registerArr1["trialDays"] = $registerResultArr[5];
            $registerArr1["surplusDays"] = $registerResultArr[6];
            $registerArr1["maximumConcurrentLicenses"] = $registerResultArr[7];
            $registerArr1["numberOfDistributableLicenses"] = $registerResultArr[9];
            $data = array('result' => 1, 'registerInfoList' => $registerArr1);
            $encodeStr = urldecode(json_encode($data));
            echo $encodeStr;
            exit;
        } else {
            write_log("{'getRegistrationInformation':'查询注册信息失败,失败错误代码为output:'.$output}");
            exitErrorJson('查询注册信息失败');
        }
    } else {
        write_log("{'getRegistrationInformation':'查询注册信息失败,失败错误代码为output:'.$output}");
        exitErrorJson('查询注册信息失败');
    }
} else if ($cmd == "authorizeToUsersFromMop") {
    $name = 'RegisterUsrPwdValue';
    $RegisterUsrPwdValue = $COMCASWEB->getfarminfo($name);

    $UsrPwdArr = explode(",", $RegisterUsrPwdValue);
    if (count($UsrPwdArr) == 2) {
        $Usr = $UsrPwdArr[0];
        $Pwd = $UsrPwdArr[1];
        if (!$Usr) {
            exitErrorJson('请确认用户名不能为空或未授权');
        }
        if (empty($Pwd)) {
            exitErrorJson('请确认密码不能为空或未授权');
        }
    }
    $VirtualDiskServer = $COMCASWEB->getfarminfo("VirtualDiskServer");
    $hostIp = $_SERVER['SERVER_ADDR'] != "127.0.0.1" ? $_SERVER['SERVER_ADDR'] : $VirtualDiskServer;

    $selectServerSql = "select server.banport,serverip.ip from server,serverip where server.ServerId=serverip.serverid and (serverip.ip='" . $hostIp . "' or serverip.ip='127.0.0.1')";
    $result = mysql_query($selectServerSql, $DSCon);
    if (mysql_num_rows($result) < 1) {
        write_log("{'getAppIcon':'未查询到符合条件的服务器信息，selectServerSql:'.$selectServerSql}");
        exitErrorJson('未查询到符合条件的服务器信息');
    }
    $row = mysql_fetch_row($result);
    $hostPort = $row[0];
    $Command = "1909";
    $Key = rand(0, 65535);
    $POST_JSON = json_decode($GLOBALS ["HTTP_RAW_POST_DATA"], true);
    $usr = trim($POST_JSON['Usr']);
    $pwd = trim($POST_JSON['Pwd']);

    $Content = (trim($POST_JSON['Usr']) ? trim($POST_JSON['Usr']) : $Usr) . "," . (trim($POST_JSON['Pwd']) ? trim($POST_JSON['Pwd']) : $Pwd);

    $Content = cmnEncryptString(base64_encode(InnerCryptNEW($Content, $Key, 10086, 2010)), '6746');
    $URL = "http://{$hostIp}:{$hostPort}/BanRequest?&cmd={$Command}&param={$Content}&key={$Key}";

    //初始化
    $ch = curl_init();
    //设置选项，包括URL
    curl_setopt($ch, CURLOPT_URL, $URL);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); //设置curl_exec()获取的信息以文件流的形式返回，而不是直接输出。
    curl_setopt($ch, CURLOPT_HEADER, 0);  //设置是否返回http头信息
    //执行并获取HTML文档内容
    $output = curl_exec($ch);
testLog('output='.$output);
    //释放curl句柄
    curl_close($ch);

    //结果
    $registerResultArr = explode(",", $output);

//    str_replace("\r\n","",$registerResultArr[0])
    if($output=="1009"){
        header('Content-Type:application/json; charset=utf-8');
        exitErrorJson('注册的产品或版本错误');
    }
    testLog($registerResultArr);
    ($registerResultArr[0] = str_replace(PHP_EOL, '', $registerResultArr[0]));
    if (count($registerResultArr) > 1 && $registerResultArr[0]) {

        $resultCode = intval($registerResultArr[0]);
        if ($resultCode == 01) {
            header('Content-Type:application/json; charset=utf-8');
            date_default_timezone_set('Asia/Shanghai');
            //获取当前服务器时间
            $time = date('Y-m-d', time());
            $dueDate = date('Y-m-d', strtotime("{$registerResultArr[10]} +{$registerResultArr[5]} day"));
            if ($time > $dueDate && $registerResultArr[2] != 1) {
                exitErrorJson('授权时间已到期');
            }
            $registerArr1["versionType"] = gbkToUtf8Encode($registerResultArr[3]);
            if ($registerResultArr[1] == -1) {
                $registerArr1["registrationStatus"] = -1;//"演示"
            } elseif ($registerResultArr[1] == 0) {
                $registerArr1["registrationStatus"] = 0;//"试用"
            } elseif ($registerResultArr[1] == 1) {
                $registerArr1["registrationStatus"] = 1;//"注册版"
            }
            $name = 'RegisterUsrPwdValue';
            $RegisterUsrPwdValue = $COMCASWEB->getfarminfo($name);

            if ($RegisterUsrPwdValue==1) {

                $id = 'fmp90000001';
                $name = 'RegisterUsrPwdValue';
                $value = ($usr . "," . ($pwd));
                $updateFarmSql = "insert farm (id, name, value) values ('" . $id . "', '" . $name . "', '" . $value . "');";
                $resultFarm = mysql_query($updateFarmSql, $DSCon);
                if (!$resultFarm) {
                    write_log("{'updateFarmSql':'添加授权信息失败-updateFarmSql：'.updateFarmSql}");
                }
            } else {


//                if (strcmp(strval($RegisterUsrPwdValue),strval($Usr . "," . $Pwd)) !=0) {
                $Usr = $UsrPwdArr[0];

                $id = 'fmp90000001';
                $value = (trim($POST_JSON['Usr']) ? trim($POST_JSON['Usr']) : $Usr) . "," . (trim($POST_JSON['Pwd']) ? trim($POST_JSON['Pwd']) : $UsrPwdArr[1]);

                $updateSql = "value='{$value}'";
                $updateFarmSql = "update farm set " . $updateSql . " where id='" . $id . "'";

                mysql_query($updateFarmSql, $DSCon);

                $affected_rows = mysql_affected_rows($DSCon);
                if ($affected_rows==1) {
                    write_log("{'updateFarmSql':'授权信息修改成功-updateFarmSql：'.$updateFarmSql}");
                }
//                }

            }
            $registerArr1["registerToNoteName"] = gbkToUtf8Encode($registerResultArr[13]?$registerResultArr[13]:$registerResultArr[11]);
            $registerArr1["registrationNumber"] = ($registerResultArr[12]);
            $registerArr1["dateOfAuthorization"] = $registerResultArr[10];
            if($registerResultArr[1] == 0){
                $registerArr1["trialDays"] = $registerResultArr[5];
                $registerArr1["surplusDays"] = $registerResultArr[6];
            }else if($registerResultArr[1] == 1){
            $registerArr1["techServerExpirationTime"] = $registerResultArr[14];
            $registerArr1["upgradeGuaranteeExpirationTime"] = $registerResultArr[15];
            }


            $registerArr1["maximumConcurrentLicenses"] = $registerResultArr[7];
            $registerArr1["numberOfDistributableLicenses"] = $registerResultArr[9];

            $data = array('result' => 1, 'registerInfoList' => $registerArr1);
            $encodeStr = urldecode(json_encode($data));
            echo $encodeStr;
            exit;
        } else {//1002
            write_log("{'authorizeToUsersFromMop':'用户名密码授权注册失败,失败错误代码为output:'.$output}");
            exitErrorJson('用户名密码授权注册失败');
        }
    } else {
        write_log("{'authorizeToUsersFromMop':'请确认输入的用户名和密码,失败错误代码为output:'.$output}");
        exitErrorJson('此用户重复注册了，请用其他用户');
    }
} else if ($cmd == "authorizeToUsersFromAuthorizedFile") {
    $POST_JSON = json_decode($GLOBALS ["HTTP_RAW_POST_DATA"], true);
    $Usr = trim($POST_JSON['Usr']);
    $Pwd = trim($POST_JSON['Pwd']);
    $fileNameReal = trim($POST_JSON['FileNameReal']);
//    testLog($POST_JSON);
    if (!$Usr) {
        exitErrorJson('用户名不能为空');
    }
    if (empty($Pwd)) {
        exitErrorJson('密码不能为空');
    }
    if (!$fileNameReal) {
        exitErrorJson('没获取授权文件名，请重新上传');
    }
    $VirtualDiskServer = $COMCASWEB->getfarminfo("VirtualDiskServer");
    $hostIp = $_SERVER['SERVER_ADDR'] != "127.0.0.1" ? $_SERVER['SERVER_ADDR'] : $VirtualDiskServer;

    $selectServerSql = "select server.banport,serverip.ip from server,serverip where server.ServerId=serverip.serverid and (serverip.ip='" . $hostIp . "' or serverip.ip='127.0.0.1')";
    $result = mysql_query($selectServerSql, $DSCon);
    if (mysql_num_rows($result) < 1) {
        write_log("{'getAppIcon':'未查询到符合条件的服务器信息，selectServerSql:'.$selectServerSql}");
        exitErrorJson('未查询到符合条件的服务器信息');
    }
    $row = mysql_fetch_row($result);
    $hostPort = $row[0];
    $Command = "1910";
    $Key = rand(0, 65535);
    //----------------------------------------------begin
    $sessionpath = session_save_path();
    //判断当期目录下的 upload 目录是否存在该文件
    //如果没有 upload 目录，你需要创建它，upload 目录权限为 777
    if (!is_dir($sessionpath . "/")) {
        //第三个参数是“true”表示能创建多级目录，iconv防止中文目录乱码
        $res = mkdir($sessionpath . "/", 0777, true);
        if (!$res) {
            write_log("{'authorizeToUsersFromAuthorizedFile':'目录 " . $sessionpath . "/ 创建失败'}");
            exitErrorJson("目录 " . $sessionpath . "/创建失败");
        }
    }
//    $readContent = str_replace("\\","/",$sessionpath) . "/" . $fileNameReal;
    $readContent = $sessionpath . "/" . $fileNameReal;
    if (!file_exists($readContent)) {
        write_log("{'authorizeToUsersFromAuthorizedFile':'授权文件上传失败,filePath:'.$sessionpath." / " . $fileNameReal}");
        exitErrorJson("授权文件上传失败");
    } else {
        if (file_exists($readContent)) {
            $readContentHandle = fopen($readContent, "r");
            //通过filesize获得文件大小，将整个文件一下子读到一个字符串中
            $keyContents = fread($readContentHandle, filesize($readContent));

            fclose($readContentHandle);
            if (!$keyContents) {
                write_log("{'uploadFileToMenu':'授权文件读取失败，fileNameReal:'.$fileNameReal}");
                exitErrorJson("授权文件读取失败");
            }
        } else {
            write_log("{'uploadFileToMenu':'授权文件读取失败，fileNameReal:'.$fileNameReal}");
            exitErrorJson("授权文件读取失败");
        }
    }
    //----------------------------------------------end
    $Content = $Usr . "," . $Pwd . "," . $keyContents;
//    testLog('rrrrrrrContent='.$Content);
    $Content = cmnEncryptString(base64_encode(InnerCryptNEW($Content, $Key, 10086, 2010)), '6746');
    $URL = "http://{$hostIp}:{$hostPort}/BanRequest?&cmd={$Command}&param={$Content}&key={$Key}";
//    testLog('FFFFFF=' . $URL);
    //初始化
    $ch = curl_init();
    //设置选项，包括URL
    curl_setopt($ch, CURLOPT_URL, $URL);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); //设置curl_exec()获取的信息以文件流的形式返回，而不是直接输出。
    curl_setopt($ch, CURLOPT_HEADER, 0);  //设置是否返回http头信息
    //执行并获取HTML文档内容
    $output = curl_exec($ch);
    //释放curl句柄
    curl_close($ch);
//    testLog('output=' . $output);
//    testLog($registerResultArr);
    unlink($readContent);
    //结果
    if ($output == 1) {
        write_log("{'authorizeToUsersFromAuthorizedFile':'1授权中心连接失败,错误代码为output:'.$output}");
        exitErrorJson('授权中心连接失败');
    } elseif ($output == 2) {
        write_log("{'authorizeToUsersFromAuthorizedFile':'2加密狗连接失败,错误代码为output:'.$output}");
        exitErrorJson('加密狗连接失败');
    } elseif ($output == 3) {
        write_log("{'authorizeToUsersFromAuthorizedFile':'3无效授权码_整个解密失败,错误代码为output:'.$output}");
        exitErrorJson('无效授权码_整个解密失败');
    } elseif ($output == 4) {
        write_log("{'authorizeToUsersFromAuthorizedFile':'4无效授权码_授权信息部分解密,错误代码为output:'.$output}");
        exitErrorJson('无效授权码_授权信息部分解密');
    } elseif ($output == 5) {
        write_log("{'authorizeToUsersFromAuthorizedFile':'5无效授权码_驱动解密失败,错误代码为output:'.$output}");
        exitErrorJson('无效授权码_驱动解密失败');
    } elseif ($output == 6) {
        write_log("{'authorizeToUsersFromAuthorizedFile':'6无效特征码_特征码不匹配,错误代码为output:'.$output}");
        exitErrorJson('无效特征码_特征码不匹配');
    } elseif ($output == 7) {
        write_log("{'authorizeToUsersFromAuthorizedFile':'7无授权信息,错误代码为output:'.$output}");
        exitErrorJson('无授权信息');
    } elseif ($output == 10) {
        write_log("{'authorizeToUsersFromAuthorizedFile':'10文件授权用户名或密码有误,错误代码为output:'.$output}");
        exitErrorJson('文件授权用户名或密码有误');
    } elseif ($output > 1000) {
        write_log("{'authorizeToUsersFromAuthorizedFile':'>1000 授权码内部错误,错误代码为output:'.$output}");
        exitErrorJson('授权码内部错误');
    }
    $registerResultArr = explode(",", $output);
//    str_replace("\r\n","",$registerResultArr[0])
    ($registerResultArr[0] = str_replace(PHP_EOL, '', $registerResultArr[0]));
    if (count($registerResultArr) > 1 && $registerResultArr[0]) {
        $resultCode = intval($registerResultArr[0]);

        if ($resultCode == 01) {
            header('Content-Type:application/json; charset=utf-8');
            date_default_timezone_set('Asia/Shanghai');
            //获取当前服务器时间

            $time = date('Y-m-d', time());
            if ($time > $registerResultArr[14]) {

                exitErrorJson('授权时间已到期');
            }
            $registerArr1["versionType"] = gbkToUtf8Encode($registerResultArr[3]);
            if ($registerResultArr[1] == -1) {
                $registerArr1["registrationStatus"] = "演示";
            } elseif ($registerResultArr[1] == 0) {
                $registerArr1["registrationStatus"] = "试用";
            } elseif ($registerResultArr[1] == 1) {
                $registerArr1["registrationStatus"] = "注册版";
            }
            $name = 'RegisterUsrPwdValue';
            $RegisterUsrPwdValue = $COMCASWEB->getfarminfo($name);

            if ($RegisterUsrPwdValue == '1') {

                $id = 'fmp90000001';
                $name = 'RegisterUsrPwdValue';
                $value = base64_encode($Usr . "," . $Pwd);
                $addRealorSql = "insert farm (id, name, value) values ('" . $id . "', '" . $name . "', '" . $value . "');";
                $resultRealor = mysql_query($addRealorSql, $DSCon);
                if (!$resultRealor) {
                    write_log("{'addRealorSql':'添加Realor失败-addRealorSql：'.$addRealorSql}");
                }
            }
            $registerArr1["registerToNoteName"] = gbkToUtf8Encode($registerResultArr[11]);
            $registerArr1["registrationNumber"] = ($registerResultArr[12]);
            $registerArr1["dateOfAuthorization"] = $registerResultArr[10];
            $registerArr1["trialDays"] = $registerResultArr[5];
            $registerArr1["surplusDays"] = $registerResultArr[6];
            $registerArr1["maximumConcurrentLicenses"] = $registerResultArr[7];
            $registerArr1["numberOfDistributableLicenses"] = $registerResultArr[9];
            $data = array('result' => 1, 'registerInfoList' => $registerArr1);
            $encodeStr = urldecode(json_encode($data));
            echo $encodeStr;
            exit;
        } else {//1002
            write_log("{'authorizeToUsersFromAuthorizedFile':'用户名密码授权注册失败,失败错误代码为output:'.$output}");
            exitErrorJson('用户名密码授权注册失败');
        }
    } else {
        write_log("{'authorizeToUsersFromAuthorizedFile':'请确认输入的用户名和密码,失败错误代码为output:'.$output}");
        exitErrorJson('请确认输入的用户名和密码');
    }
} else if ($cmd == "getServerPath") {
    $parentPath = $requestObj['parentPath'];
    if (!isset($parentPath) || empty($parentPath)) {
        write_log("{'getServerPath':'目录不可为空，parentPath:'.$parentPath}");
        exitErrorJson('未查询到符合条件的服务器信息');
    }

    $Content = $parentPath;

    $VirtualDiskServer = $COMCASWEB->getfarminfo("VirtualDiskServer");
    $hostIp = $_SERVER['SERVER_ADDR'] != "127.0.0.1" ? $_SERVER['SERVER_ADDR'] : $VirtualDiskServer;
    $selectServerSql = "select server.banport,serverip.ip from server,serverip where server.ServerId=serverip.serverid and (serverip.ip='" . $hostIp . "' or serverip.ip='127.0.0.1')";
    $result = mysql_query($selectServerSql, $DSCon);
    if (mysql_num_rows($result) < 1) {
        write_log("{'getServerPath':'未查询到符合条件的服务器信息，selectServerSql:'.$selectServerSql}");
        exitErrorJson('未查询到符合条件的服务器信息');
    }
    $row = mysql_fetch_row($result);
    $hostPort = $row[0];
    $Command = "1907";

    //上传成功，进行解压
    $Key = rand(0, 65535);
    $content1 = InnerCryptNEW($Content, $Key, 10086, 2010);
    $content2 = base64_encode($content1);
    $content3 = cmnEncryptString($content2, '6746');
    //$Content = cmnEncryptString(base64_encode(InnerCryptNEW($Content, $Key, 10086, 2010)), '6746');
    $Content = $content3;
    $URL = "http://{$hostIp}:{$hostPort}/BanRequest?&cmd={$Command}&param={$Content}&key={$Key}";

    //初始化
    $ch = curl_init();
    //设置选项，包括URL
    curl_setopt($ch, CURLOPT_URL, $URL);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); //设置curl_exec()获取的信息以文件流的形式返回，而不是直接输出。
    curl_setopt($ch, CURLOPT_HEADER, 0);  //设置是否返回http头信息
    //执行并获取HTML文档内容
    $output = curl_exec($ch);
    //释放curl句柄
    curl_close($ch);

    //解压结果
    $serverMenuArr = explode("\n", $output);
    if (count($serverMenuArr) > 1) {
        if (intval($serverMenuArr[0]) == 0) {
            header('Content-Type:application/json; charset=utf-8');

            $dirListArr = array();
            $folderArr = array();
            $fileArr = array();

            /*
            $serverMenuArr1 = explode(";",$serverMenuArr[1]);
            $folderArr = explode(",",urlencode(iconv("gb2312","UTF-8",$serverMenuArr1[0])));
            $fileArr = explode(",",urlencode(iconv("gb2312","UTF-8",$serverMenuArr1[1])));
            $dirListArr["folderList"] = $folderArr;
            $dirListArr["fileList"] = $fileArr;
            */
            $fileArr = explode(",", urlencode(iconv("gb2312", "UTF-8", $serverMenuArr[1])));
            $dirListArr["fileList"] = $fileArr;

            header('Content-Type:application/json; charset=utf-8');
            $data = array('result' => 1, 'dirList' => $dirListArr);
            $encodeStr = urldecode(json_encode($data));
            echo $encodeStr;
            exit;
        } else {
            write_log("{'getServerPath':'查询目录结构失败，output:'.$output}");
            exitErrorJson('查询目录结构失败');
        }
    } else {
        write_log("{'getServerPath':'查询目录结构失败，output:'.$output}");
        exitErrorJson('查询目录结构失败');
    }
} else if ($cmd == "getServerResourceInfo") {
//    $serverId = $requestObj['serverId'];
//    if (!isset($serverId) || empty($serverId)) {
//        write_log("{'getServerResourceInfo':'服务器ID不可为空，serverId:'.$serverId}");
//        exitErrorJson('服务器ID不可为空');
//    }
    $serverIdArr = array();
    $serverIdArr = getServerIPNameList();
//    testLog($serverIdArr);
    header('Content-Type:application/json; charset=utf-8');
    $resourceArr = array();
    if (sizeof($serverIdArr)) {
        $DCCon = creatconniction("DC");
        if ($DCCon == -1) {
            write_log("{'getServerResourceInfo':'DC创建数据库链接失败'}");
            exitErrorJson('创建数据库链接失败');
        }
        $i = 0;
        for (; $i < count($serverIdArr); ++$i) {
//            testLog($serverIdArr[$i]['serverId']);
//            testLog($serverIdArr[$i]['serverName']);
//            testLog($serverIdArr[$i]['serverIp']);
            $selectServerLoad = "select * from dc_serverload where ServerID='" . $serverIdArr[$i]['serverId'] . "'";

            $result = mysql_query($selectServerLoad, $DCCon);

            if (mysql_num_rows($result) < 1) {
                write_log("{'getServerResourceInfo':'服务器ID不可为空，serverId:'.$serverIdArr[$i]['serverId']}");
                exitErrorJson('未查询到符合条件的服务器信息');
            }
            $row = mysql_fetch_row($result);
//            testLog($row);
            $resourceArr[$i]['serverName'] = $serverIdArr[$i]['serverName'];
            $resourceArr[$i]['cpu'] = $row['1'];
            $resourceArr[$i]['memory'] = $row['2'];
            $resourceArr[$i]['diskRate'] = $row['5'];
            $resourceArr[$i]['sessionNumber'] = $row['3'];
            $resourceArr[$i]['networkRate'] = gbkToUtf8Encode($row['4']);
        }
    }
//    $selectServerLoad = "select * from dc_serverload where ServerID='" . $serverId . "'";
//    $result = mysql_query($selectServerLoad, $DCCon);
//    if (mysql_num_rows($result) < 1) {
//        write_log("{'getServerResourceInfo':'服务器ID不可为空，serverId:'.$serverId}");
//        exitErrorJson('未查询到符合条件的服务器');
//    }
//    $row = mysql_fetch_row($result);
//    $resourceArr['serverId'] = $row['0'];
//    $resourceArr['cpu'] = $row['1'];
//    $resourceArr['memory'] = $row['2'];
//    $resourceArr['diskRate'] = $row['5'];
//    $resourceArr['networkRate'] = gbkToUtf8Encode($row['4']);
//    $appNum = $row['3'];
//    $data = array('result' => 1, 'appNum' => $appNum, 'resource' => $resourceArr);
    $data = array('result' => 1, 'resource' => $resourceArr);
    $encodeStr = urldecode(json_encode($data));
    echo $encodeStr;
    exit;
} else if ($cmd == "getServerSessionInfo") {
    $serverSessionArr = array();
    $serverSessionArr = getServerSessionList();
//    $serverSessionArr = array();
    $num = sizeof($serverSessionArr);
//    testLog("num=".$num);
    header('Content-Type:application/json; charset=utf-8');
    $resourceArr = array();
    if ($num > 0) {
        $resourceArr['sessionList'] = $serverSessionArr;
        $resourceArr['appNumber'] = $num;
        $data = array('result' => 1, 'resource' => $resourceArr);
    } else {
        $resourceArr['msg'] = "没有数据";
        $data = array('result' => 0, 'resource' => $resourceArr);
    }
    $encodeStr = urldecode(json_encode($data));
    echo $encodeStr;
    exit;
} else if ($cmd == "getUserResourceInfo") {
    $userId = $requestObj['userId'];
    if (!isset($userId) || empty($userId)) {
        write_log("{'getUserResourceInfo':'用户ID不可为空，userId:'.$userId}");
        exitErrorJson('用户ID不可为空');
    }

    $VirtualDiskServer = $COMCASWEB->getfarminfo("VirtualDiskServer");
    $hostIp = $_SERVER['SERVER_ADDR'] != "127.0.0.1" ? $_SERVER['SERVER_ADDR'] : $VirtualDiskServer;
    $selectServerSql = "select server.banport,serverip.ip from server,serverip where server.ServerId=serverip.serverid and (serverip.ip='" . $hostIp . "' or serverip.ip='127.0.0.1')";
    $result1 = mysql_query($selectServerSql, $DSCon);
    if (mysql_num_rows($result) < 1) {
        write_log("{'getUserResourceInfo':'未查询到符合条件的服务器信息，selectServerSql:'.$selectServerSql}");
        exitErrorJson('未查询到符合条件的服务器信息');
    }
    $row1 = mysql_fetch_row($result1);
    $hostPort = $row1[0];
    $Command = "1906";

    $Content = " ";
    $Key = "";
    if ("all" != $userId) {
        $result = mysql_query("select * from cuser where user_Id='" . $userId . "'", $DSCon);
        if (mysql_num_rows($result) < 1) {
            write_log("{'getUserResourceInfo':'未查询到符合条件的用户，userId:'.$userId}");
            exitErrorJson('未查询到符合条件的用户');
        }
        $row = mysql_fetch_row($result);

        $Content = $row['1'];
    }

    $Key = rand(0, 65535);
    $Content = cmnEncryptString(base64_encode(InnerCryptNEW($Content, $Key, 10086, 2010)), '6746');
    $URL = "http://{$hostIp}:{$hostPort}/BanRequest?&cmd={$Command}&param={$Content}&key={$Key}";

    //初始化
    $ch = curl_init();
    //设置选项，包括URL
    curl_setopt($ch, CURLOPT_URL, $URL);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); //设置curl_exec()获取的信息以文件流的形式返回，而不是直接输出。
    curl_setopt($ch, CURLOPT_HEADER, 0);  //设置是否返回http头信息
    //执行并获取HTML文档内容
    $output = curl_exec($ch);
    //释放curl句柄
    curl_close($ch);

    $resourceCurlArr = explode("\n", $output);
    if (count($resourceCurlArr) > 1) {
        if (intval($resourceCurlArr[0]) == 0) {
            header('Content-Type:application/json; charset=utf-8');

            $resourceArr = array();

            $appNum = 0;
            if (isset($resourceCurlArr[1]) && !empty($resourceCurlArr[1])) {
                $userAppList = explode(";", $resourceCurlArr[1]);
                $appNumTemp = count($userAppList);
                $appNum = $appNumTemp > 1 ? $appNumTemp : 0;
                if ($appNum > 0) {
                    foreach ($userAppList as $key => $value) {
                        $valueArr = explode(",", $value);
                        $userAppArr = array();
                        $userAppArr['appName'] = $valueArr[0];
                        $userAppArr['cpu'] = $valueArr[1];
                        $userAppArr['memory'] = $valueArr[2];
                        $userAppArr['diskReadRate'] = $valueArr[3];
                        $userAppArr['diskWriteRate'] = $valueArr[4];
                        $resourceArr[$key] = $userAppArr;
                    }
                }
            }

            header('Content-Type:application/json; charset=utf-8');
            $data = array('result' => 1, 'appNum' => $appNum, 'resource' => $resourceArr);
            $encodeStr = urldecode(json_encode($data));
            echo $encodeStr;
            exit;
        } else {
            write_log("{'getUserResourceInfo':'查询用户资源占用情况失败，output:'.$output}");
            exitErrorJson('查询用户资源占用情况失败');
        }
    } else {
        write_log("{'getUserResourceInfo':'查询用户资源占用情况失败，output:'.$output}");
        exitErrorJson('查询用户资源占用情况失败');
    }
} else if ($cmd == "getDeployedApp") {
    $userId = $requestObj['userId'];
    if (!isset($userId) || empty($userId)) {
        write_log("{'getDeployedApp':'用户ID不可为空，userId:'.$userId}");
        exitErrorJson('用户ID不可为空');
    }

    $getAppListSql = "select * from application where droit_list like '%{$userId}%'";
    $result = mysql_query($getAppListSql, $DSCon);
    $rows = mysql_num_rows($result);
    if ($rows < 1) {
        write_log("{'getDeployedApp':'未查询到符合条件的应用，getAppListSql:'.$getAppListSql}");
        exitErrorJson('未查询到符合条件的应用');
    }

    $appListArr = array();
    $i = 0;
    for (; $i < $rows; ++$i) {
        $row = mysql_fetch_row($result);
        $appArr = array();
        $appId = $row['0'];
        $appArr['appId'] = $appId;
        $appArr['name'] = gbkToUtf8Encode($row['1']);
        if ($row['16'] == 0) {
            $appArr['type'] = "CS";
        } else if ($row['16'] == 3) {
            $appArr['type'] = "BS";
        }
        $appArr['desc'] = gbkToUtf8Encode($row['6']);
        $appArr['appIcon'] = "/icon/{$appId}.bmp";
        $appArr['enable'] = $row['46'];

        if (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == "on") {
            $urlrap = "https://" . $_SERVER['HTTP_HOST'];
        } else {
            $urlrap = "http://" . $_SERVER['HTTP_HOST'];
        }

        $urlrap .= "/RAPAgent.XGI?CMD=GETApplication&AppID={$appId}&Language=ZH-CN&User={$adminName}&PWD={$adminPwd}&AuthType=0";
        $appArr['openUrl'] = "RAP://" . bin2hex(base64_encode(acrypt("{$urlrap}")));
        $appListArr[$i] = $appArr;
    }

    $row = mysql_fetch_row($result);

    header('Content-Type:application/json; charset=utf-8');
    $data = array('result' => 1, 'appList' => $appListArr);
    $encodeStr = urldecode(json_encode($data));
    echo $encodeStr;
    exit;
} else if ($cmd == "getAppVisitLog") {
    $POST_JSON = json_decode($GLOBALS ["HTTP_RAW_POST_DATA"], true);
    $pageNo = trim($POST_JSON['pageNo']);
//    testLog($POST_JSON);
    $pageSize = 6;//$requestObj['pageSize']
    $LogCon = creatconniction("Log");
    if ($LogCon == -1) {
        write_log("{'getAppVisitLog':'Log创建数据库链接失败'}");
        exitErrorJson('创建数据库链接失败');
    }

    $accountStr = getDefaultVal($requestObj['accountStr'], "");
    $likeStr = "  WHERE 1=1 ";
    if (!empty($accountStr)) {
        $likeStr = $likeStr . " AND farmuser LIKE '%" . utf8ToGbk($accountStr) . "%'";
    }

    $appNameStr = getDefaultVal($requestObj['appNameStr'], "");
    if (!empty($appNameStr)) {
        $likeStr = $likeStr . " AND appshowname LIKE '%" . utf8ToGbk($appNameStr) . "%'";
    }

    $time = getDefaultVal($requestObj['time'], "");
    if ($time == "day") {
        $likeStr = $likeStr . " AND TO_DAYS( NOW( ) ) - TO_DAYS(starttime) <1";
    } else if ($time == "week") {
//        $likeStr = $likeStr . " AND DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(starttime)";
        $likeStr = $likeStr . " AND YEARWEEK(date_format(starttime,'%Y-%m-%d')) = YEARWEEK(NOW())";
    } else if ($time == "month") {
        $likeStr = $likeStr . " AND DATE_SUB(CURDATE(), INTERVAL 1 MONTH) <= date(starttime)";
    } else if ($time == "custom") {
        $startTime = getDefaultVal($requestObj['startTime'], "");
        $endTime = getDefaultVal($requestObj['endTime'], "");
        if ($startTime == "") {
            write_log("{'getAppVisitLog':'开始时间不可为空，startTime:'.$startTime}");
            exitErrorJson('开始时间不可为空');
        }
        if ($endTime == "") {
            write_log("{'getAppVisitLog':'结束时间不可为空，endTime:'.$endTime}");
            exitErrorJson('结束时间不可为空');
        }

        $startTime = substr_replace($startTime, " ", 10, 0);
        $endTime = substr_replace($endTime, " ", 10, 0);

        $likeStr = $likeStr . " AND  unix_timestamp(starttime)>=unix_timestamp('{$startTime}') AND unix_timestamp(starttime)<=unix_timestamp('{$endTime}')";

    }

    //计算实际总记录数量
    $resultTotal = mysql_query("SELECT count(0) as totalSize FROM appshenji " . $likeStr, $DSCon);

    $rowTotal = mysql_fetch_row($resultTotal);
    $totalSize = $rowTotal[0];

    $likeStr = $likeStr . " ORDER BY sessionid DESC ";
    $getAppLogListSql = "SELECT * FROM appshenji " . $likeStr;

    $pageNo = getDefaultVal($pageNo, 1);
//    testLog('pageNo=' . $pageNo);
    if (!is_numeric($pageNo)) {
        $pageNo = 1;
    }
    $pageSize = getDefaultVal($pageSize, 20);
    if (!is_numeric($pageSize)) {
        $pageSize = 20;
    }
    $totalPage = ceil($totalSize / $pageSize);
//    testLog('totalSize=' . $totalSize);
//    testLog("pageSize=" . $pageSize);
//    testLog('totalPage=' . $totalPage);
    if ($pageNo > $totalPage) {
        $pageNo = $totalPage == 0 ? 1 : $totalPage;
//        testLog('pageNo=' . $pageNo);
    }

    $start = ($pageNo - 1) * $pageSize;
    $getAppLogListSql = $getAppLogListSql . "limit " . $start . "," . $pageSize;
//    testLog('getAppLogListSql='.$getAppLogListSql);
    $result = mysql_query($getAppLogListSql, $LogCon);
    $rows = mysql_num_rows($result);

    if ($rows < 1) {
        write_log("{'getAppVisitLog':'未查询到符合条件的日志，getAppLogListSql:'.$getAppLogListSql}");
        exitErrorJson('未查询到符合条件的日志');
    }

    $logListArr = array();
    $i = 0;
    for (; $i < $rows; ++$i) {
        $row = mysql_fetch_row($result);
//        testLog($row);
        $logArr = array();
        $logArr['sessionId'] = $row['1'];
        $logArr['account'] = gbkToUtf8Encode($row['2']);
        $logArr['appName'] = gbkToUtf8Encode($row['4']);
        $logArr['clientMac'] = gbkToUtf8Encode($row['5']);
        $logArr['startTime'] = $row['6'];
        $logArr['endTime'] = $row['7'];
        $logListArr[$i] = $logArr;
    }
//    $row = mysql_fetch_row($result);
//    testLog($logListArr);
    header('Content-Type:application/json; charset=utf-8');
    $data = array('result' => 1, 'logList' => $logListArr, 'total' => $totalSize);
    $encodeStr = urldecode(json_encode($data));
    echo $encodeStr;
    exit;
} else if ($cmd == "getAppVisitLogByDataTable") {
    /***begin***/
    $LogCon = creatconniction("Log");
    if ($LogCon == -1) {
        write_log("{'getAppVisitLog':'Log创建数据库链接失败'}");
        exitErrorJson('创建数据库链接失败');
    }
    $index = $_GET['iSortCol_0'];
    $ord = $_GET['sSortDir_0']; //排序
    $pagenum = $_GET['iDisplayLength'];
    $page_start = $_GET['iDisplayStart'];
    $field = $_GET['mDataProp_' . $index]; //排序字段
    $sSearch = $_GET['sSearch']; //关键字
//echo "字段".$field."|排序：".$ord;
    $sql_where = "";
    if ($sSearch) {
        $sql_where = " WHERE farmuser like '%" . $sSearch . "%'  OR appshowname like '%" . $sSearch . "%'  OR clientmac like '%" . $sSearch . "%'";
    }
//$sql = "SELECT * FROM appshenji {$sql_where } ORDER  BY {$field} {$ord}" ;
    $getAppLogListSqlByDataTableSql = "SELECT sessionid, farmuser, appshowname, clientmac, starttime, stoptime FROM appshenji {$sql_where }";
    $getAppLogListSqlByDataTableSql .= " LIMIT " . $page_start . "," . $pagenum . "";

    $result = mysql_query($getAppLogListSqlByDataTableSql, $LogCon);
    $num = mysql_num_rows($result);
    while ($row = mysql_fetch_array($result)) {
        $list[] = $row;
    }
    $data = array(
        'iTotalRecords' => $num,
        'iTotalDisplayRecords' => $num,
        'aaData' => $list
    );
    echo json_encode($data);
    exit;
    /****end***/
} else if ($cmd == "syncAppData") {
    $appId = $requestObj['appId'];
    if (!isset($appId) || empty($appId)) {
        write_log("{'syncAppData':'应用ID不可为空，appId:'.$appId}");
        syncAppError('应用ID不可为空');
    }

    $result = mysql_query("select * from application where app_Id='" . $appId . "'", $DSCon);
    if (mysql_num_rows($result) < 1) {
        write_log("{'syncAppData':'未查询到符合条件的应用，appId:'.$appId}");
        syncAppError('未查询到符合条件的应用');
    }
    $appRow = mysql_fetch_row($result);

    //图标构建
    $ICON = $appRow[57];
    $handle = fopen($WWWRoot . "\\ico\\ICO_" . $appId . ".bmp", "a");
    fwrite($handle, $ICON);
    fclose($handle);

    $applicationName = gbkToUtf8Encode($appRow[1]);

    $VirtualDiskServer = $COMCASWEB->getfarminfo("VirtualDiskServer");
    $hostIp = $_SERVER['SERVER_ADDR'] != "127.0.0.1" ? $_SERVER['SERVER_ADDR'] : $VirtualDiskServer;
    $selectServerSql = "select server.webport,serverip.ip from server,serverip where server.ServerId=serverip.serverid and (serverip.ip='" . $hostIp . "' or serverip.ip='127.0.0.1')";
    $result1 = mysql_query($selectServerSql, $DSCon);
    if (mysql_num_rows($result1) < 1) {
        write_log("{'syncAppData':'未查询到符合条件的服务器信息，selectServerSql:'.$selectServerSql}");
        syncAppError('未查询到符合条件的服务器信息');
    }
    $row1 = mysql_fetch_row($result1);
    $webPort = $row1[0];

    $icoTimeUrl = "http://{$hostIp}:{$webPort}/ico/ICO_" . $appId . ".bmp";

    $selectAppSql = "select app_path,app_work_dir from application where app_Id='" . $appId . "'";
    $result4 = mysql_query($selectAppSql, $DSCon);
    if (mysql_num_rows($result4) < 1) {
        write_log("{'getApplication':'未查询到符合条件的应用，selectAppSql:'.$selectAppSql}");
        syncAppError('未查询到符合条件的应用');
    }
    $row1 = mysql_fetch_row($result4);
    $app_path = str_replace("\\", "/", $row1[0]);
    $app_work_dir = str_replace("\\", "/", $row1[1]);

    //获取所有用户
    $droit_list = getAllUserStr();
    $updateSql .= "droit_list='" . $droit_list . "'";
    $icoTimeUrl = utf8ToGbk($icoTimeUrl);
    $updateSql .= ",icoTimeUrl='" . $icoTimeUrl . "'";
    $updateSql .= ",app_path='" . $app_path . "'";
    $updateSql .= ",app_work_dir='" . $app_work_dir . "'";
    $updateAppSql = "update application set " . $updateSql . " where app_id='" . $appId . "'";
    $result2 = mysql_query($updateAppSql, $DSCon);
    if (!$result2) {
        write_log("{'syncAppData':'更新应用失败，updateAppSql:'.$updateAppSql}");
        syncAppError("更新应用失败！");
    }

    $interfaceArr = parse_ini_file($WWWRoot . "/interface.ini", TRUE);
    $syncAppUrl = $interfaceArr["syncApp"]["syncAppUrl"];
    $params = array('applicationName' => $applicationName, 'applicationIconURL' => $icoTimeUrl, 'remoteApplicationId' => $appId);
    $result3 = do_get($syncAppUrl, $params);
    $resultArr = json_decode($result3, true);
    $statusCode = $resultArr['result'];
    if ($statusCode == 200) {
        write_log("{'syncAppData':'应用同步成功，appId:'.$appId}");
    } else if ($statusCode == 9999) {
        $failMsg = $resultArr['content'];
        write_log("{'syncAppData':'应用同步失败，appId:'.$appId.','.$failMsg}");
    }
    echo $result3;
} else if ($cmd == "getPhoneCode") {
    $POST_JSON = json_decode($GLOBALS ["HTTP_RAW_POST_DATA"], true);
    $userName = $POST_JSON['Usr'];
    $passWord = $POST_JSON['Pwd'];
    $mobile = getDefaultVal(trim($POST_JSON['Phone']), '');
    if (!isset($userName) || empty($userName)) {
        write_log("{'getPhoneCode':'用户名不可为空，userName:'.$userName}");
        exitErrorJson('用户名不可为空');
    }
    if (!isset($passWord) || empty($passWord)) {
        write_log("{'getCheckCode':'密码不可为空，passWord:'.$passWord}");
        exitErrorJson('密码不可为空');
    }
    if (!isset($mobile) || empty($mobile)) {
        write_log("{'getPhoneCode':'手机号码不能为空，mobile:'.$mobile}");
        exitErrorJson('手机号码不能为空');
    }
    if (isset($mobile) || !empty($mobile)) {
        if (!preg_match("/^1[34578]\d{9}$/", $mobile)) {
            write_log("{'getPhoneCode':'输入正确的手机号号，mobile:'.$mobile}");
            exitErrorJson('输入正确的手机号号');
        }
    }
    $url = "http://mop.realor.cn/AjaxSvc.ashx";
    $params = array('CMD' => 'GetPhoneCode', 'User' => $userName, 'SysCap' => 'GWT', 'Phone' => $mobile, 'Pwd' => $passWord);
    $result = curl_get_https($url, $params);

    $resultArr = explode("~", $result);

    if (count($resultArr) == 3 && $resultArr[0] == true && $resultArr[1] == '10007') {
        header('Content-Type:application/json; charset=utf-8');
        $data = array('result' => 1, 'code' => $resultArr[2]);
        exit(json_encode($data));
    } else {
        write_log("{'getPhoneCode':'手机验证码发送失败，错误代码：'.$resultArr[1].}");
        if ($resultArr[1] == '10004') {
            exitErrorJson('电话号码格式不正确');
        } else if ($resultArr[1] == '10005') {
            exitErrorJson('帐号或密码出错');
        } else if ($resultArr[1] == '10008') {
            exitErrorJson('该账户已绑定其他手机号，请更换绑定的手机号');
        } else if ($resultArr[1] == '10014') {
            exitErrorJson('该账户已绑定其他手机号，请更换绑定的手机号');
        } else if ($resultArr[1] == '10021') {
            exitErrorJson('不是GWT产品');
        } else if ($resultArr[1] == '10022') {
            exitErrorJson('该账户已绑定其他手机号，请更换绑定的手机号');
        } else if ($resultArr[1] == '10023') {
            exitErrorJson('该手机已绑定过其他用户，不能再注册');
        } else {
            exitErrorJson('未知原因的获取验证码失败');
        }
    }
} else if ($cmd == "getCheckCode") {
    $POST_JSON = json_decode($GLOBALS ["HTTP_RAW_POST_DATA"], true);
    $userName = $POST_JSON['Usr'];
    $passWord = $POST_JSON['Pwd'];
    $code = $POST_JSON['Code'];
    $mobile = getDefaultVal(trim($POST_JSON['Phone']), '');

    if (!isset($userName) || empty($userName)) {
        write_log("{'getCheckCode':'用户名不可为空，userName:'.$userName}");
        exitErrorJson('用户名不可为空');
    }
    if (!isset($passWord) || empty($passWord)) {
        write_log("{'getCheckCode':'密码不可为空，passWord:'.$passWord}");
        exitErrorJson('密码不可为空');
    }
    if (!isset($code) || empty($code)) {
        write_log("{'getCheckCode':'验证码不可为空，code:'.$code}");
        exitErrorJson('验证码不可为空');
    }
    if (!isset($mobile) || empty($mobile)) {
        write_log("{'getCheckCode':'手机号码不能为空，mobile:'.$mobile}");
        exitErrorJson('手机号码不能为空');
    }
    if (isset($mobile) || !empty($mobile)) {
        if (!preg_match("/^1[34578]\d{9}$/", $mobile)) {
            write_log("{'getCheckCode':'输入正确的手机号号，mobile:'.$mobile}");
            exitErrorJson('输入正确的手机号号');
        }
    }

    $url = "https://mop.realor.cn/AjaxSvc.ashx";
    $params = array('CMD' => 'GetCheckCode', 'User' => $userName, 'SysCap' => 'GWT', 'Phone' => $mobile, 'Pwd' => $passWord, 'Code' => $code);
    $result = curl_get_https($url, $params);
    $url1 = "http://mop.realor.cn/AjaxSvc.ashx";
    $result1 = do_get($url1, $params);
    $result = $result ? $result : $result1;
    $resultArr = explode("~", $result);

    if (count($resultArr) == 3 && $resultArr[0] == true && $resultArr[1] == '10009') {
        header('Content-Type:application/json; charset=utf-8');
        $data = array('result' => 1, 'code' => $resultArr[1]);
        exit(json_encode($data));
    } else {
        write_log("{'getCheckCode':'手机验证码发送失败，错误代码：'.$resultArr[1].}");
        if ($resultArr[1] == '10004') {
            exitErrorJson('电话号码格式不正确');
        } else if ($resultArr[1] == '10005') {
            exitErrorJson('帐号或密码出错');
        } else if ($resultArr[1] == '10008') {
            exitErrorJson('该账户已绑定其他手机号，请更换绑定的手机号');
        } else if ($resultArr[1] == '10011' || $resultArr[1] == '10012') {
            exitErrorJson('该账户已绑定其他手机号，请更换绑定的手机号');
        } else if ($resultArr[1] == '10013' || $resultArr[1] == '10025' || $resultArr[1] == '10024') {
            exitErrorJson('验证码错误或失效');
        } else if ($resultArr[1] == '10014') {
            exitErrorJson('该账户已绑定其他手机号，请更换绑定的手机号');
        } else if ($resultArr[1] == '10015') {
            exitErrorJson('未知原因错误');
        } else if ($resultArr[1] == '10021' || $resultArr[1] == '10022') {
            exitErrorJson('不是GWT产品');
        } else if ($resultArr[1] == '10023') {
            exitErrorJson('该手机已绑定过其他用户，不能再注册');
        } else {
            exitErrorJson('未知原因的获取验证码失败');
        }
    }
} else {
    write_log("{'接口尚未添加':'，cmd:'.$cmd}");
    exitErrorJson('接口尚未添加');
}

//admin
//getUserDetailByUserIdOut
//user getUserDetail

function getDefaultVal($str, $defaultVal)
{
    if (empty($str) || !isset($str)) {
        return $defaultVal;
    } else {
        return $str;
    }
}

function exitErrorJson($errorMsg)
{
    header('Content-Type:application/json; charset=utf-8');
    $data = array('result' => 0, 'msg' => urlencode($errorMsg));
    $encodeStr = urldecode(json_encode($data));
    echo $encodeStr;
    exit;
}

function syncAppError($errorMsg)
{
    header('Content-Type:text/plain; charset=utf-8');
    $data = "失败返回结果{\"result\":9999,\"msg\":\"失败\",\"content\":\"" . $errorMsg . "\"}";
    $decodeStr = urldecode($data);
    echo $decodeStr;
    exit;
}

function RandomPasswd16() //生成16位随机字符串
{
    $character = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'; //!@$^*+-~`";:.()[]{}<>';
    $cleng = strlen($character) - 1;
    $result = '';
    for ($i = 0; $i < 16; $i++) {
        $position = rand(0, $cleng);
        $result .= substr($character, $position, 1);
    }
    return $result;
}

function Crypt3($s, $bEncrypt = true)
{
    $result = "";
    $Key = 3562;
    $SeedA = 5891;
    $SeedB = 5920;
    $i = 0;
    $a = 0;
    for (; $i < strlen($s); ++$i) {
        //pr^ := ps^ xor (Key shr 8);
        $a = ord($s[$i]) ^ (($Key >> 8) & 0x0FFFFFFF);
        $a = $a & 0xFF;
        $result = $result . chr($a);

        if ($bEncrypt)
            $Key = (($a + $Key) * $SeedA + $SeedB) & 0x0FFFFFFF;
        else
            $Key = ((ord($s[$i]) + $Key) * $SeedA + $SeedB) & 0x0FFFFFFF;
    }
    return $result;
}

function AddNtUserToAllServer($UID, $UName, $UPasswd, $FullName, $Description) //工作组方式集群，每个服务器添加一个用户
{
    //默认都添加到administrators组中
    //',,SroopyCzrw==,SprIrDyqKNV8d9LthfcCZJYG4UE=,,,a5Dtn3CFhlI=,ZGVzY3JpcHRpb24=,Administrators'
    $UName = CryptTxt($UName);
    $UPasswd = CryptTxt($UPasswd);
    $cmdContent = ',,' . $UName . ',' . $UPasswd . ',,,' . CryptTxt($FullName) . ',' . base64_encode($Description) . ',Administrators';

    $DSCon = creatconniction("DS");
    if ($DSCon == -1) {
        header('Content-Type:application/json; charset=utf-8');
        $data = array('result' => 0, 'msg' => urlencode('创建数据库链接失败'));
        $encodeStr = urldecode(json_encode($data));
        echo $encodeStr;
        exit;
    }

    $serverResult = mysql_query("select server.serverid,server.banport,serverip.ip,server.actived from server,serverip where server.ServerId=serverip.serverid", $DSCon);
    $j = 0;
    for (; $j < mysql_num_rows($serverResult); ++$j) {
        $serverRow = mysql_fetch_row($serverResult);

        if (getFromURL($serverRow[2], $serverRow[1], '1001', $cmdContent) == "0") //成功
        {
            $uid = $UID;
            $serverId = $serverRow[0];
            $serverUid = $UName;
            $serverPwd = $UPasswd;
            $result = mysql_query("insert cuser_serveruser (Uid, ServerId, ServerUid, ServerPwd) values ('" . $uid . "', '" . $serverId . "', '" . $serverUid . "', '" . $serverPwd . "');", $DSCon);
            if (!$result) {
                header('Content-Type:application/json; charset=utf-8');
                $data = array('result' => 0, 'msg' => urlencode('添加用户数据失败！'));
                $encodeStr = urldecode(json_encode($data));
                echo $encodeStr;
                exit;
            }
        }
    }
}

function AddNtUserToAllServerImportUsers($UID, $UName, $UPasswd, $FullName, $Description) //工作组方式集群，每个服务器添加一个用户
{
    //默认都添加到administrators组中
    //',,SroopyCzrw==,SprIrDyqKNV8d9LthfcCZJYG4UE=,,,a5Dtn3CFhlI=,ZGVzY3JpcHRpb24=,Administrators'
    $UName = CryptTxt($UName);
    $UPasswd = CryptTxt($UPasswd);
    $cmdContent = ',,' . $UName . ',' . $UPasswd . ',,,' . CryptTxt($FullName) . ',' . base64_encode($Description) . ',Administrators';

    $DSCon = creatconniction("DS");
    if ($DSCon == -1) {
        header('Content-Type:application/json; charset=utf-8');
        $data = array('result' => 0, 'msg' => urlencode('创建数据库链接失败'));
        $encodeStr = urldecode(json_encode($data));
        echo $encodeStr;
        exit;
    }

    $serverResult = mysql_query("select server.serverid,server.banport,serverip.ip,server.actived from server,serverip where server.ServerId=serverip.serverid", $DSCon);
    $j = 0;
    for (; $j < mysql_num_rows($serverResult); ++$j) {
        $serverRow = mysql_fetch_row($serverResult);

        if (getFromURL($serverRow[2], $serverRow[1], '1001', $cmdContent) == "0") //成功
        {
            $uid = $UID;
            $serverId = $serverRow[0];
            $serverUid = $UName;
            $serverPwd = $UPasswd;
            $result = mysql_query("insert cuser_serveruser (Uid, ServerId, ServerUid, ServerPwd) values ('" . $uid . "', '" . $serverId . "', '" . $serverUid . "', '" . $serverPwd . "');", $DSCon);
            if (!$result) {
                //添加Nt账户失败
                return -1;
            }
        }
    }
}

function CryptTxt($text)
{
    return base64_encode(Crypt2($text, true));
}

function DeCryptTxt($text)
{
    return Crypt2(base64_decode($text), false);
}

function getFromURL($Host, $Port, $Command, $Content)
{
    //Command:
    //1001: 添加一个Windows用户
    //AddUserToRemote:添加域用户到本地远程桌面组

    //加密处理cmdContent,time-->key mod 65---->
    $Key = rand(0, 65535);
    $Content = cmnEncryptString(base64_encode(InnerCryptNEWAddUser($Content, $Key, 10086, 2010)), '6746');
    $URL = "http://{$Host}:{$Port}/BanRequest?&cmd={$Command}&param={$Content}&key={$Key}";

    //初始化
    $ch = curl_init();
    //设置选项，包括URL
    curl_setopt($ch, CURLOPT_URL, $URL);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); //设置curl_exec()获取的信息以文件流的形式返回，而不是直接输出。
    curl_setopt($ch, CURLOPT_HEADER, 0);  //设置是否返回http头信息
    //执行并获取HTML文档内容
    $output = curl_exec($ch);

    //释放curl句柄
    curl_close($ch);
    return $output;
}

function InnerCryptNEW($s, $Key, $SeedA, $SeedB)
{
    $s = bin2hex(iconv("UTF-8", "gb2312", $s));
    $result = "";
    $i = 0;
    $a = 0;
    for (; $i < strlen($s); ++$i) {
        //pr^ := ps^ xor (Key);
        //Key := Key + (SeedA - SeedB) * 2 + SeedB;
        //pr := pointer(integer(pr) + 1);
        //ps := pointer(integer(ps) + 1);
        $a = ord($s[$i]) ^ ($Key);
        $result = $result . chr($a);

        $Key = $Key + ($SeedA - $SeedB) * 2 + $SeedB;
    }
    return $result;
}

function InnerCryptNEWAddUser($s, $Key, $SeedA, $SeedB)
{
    $result = "";
    $i = 0;
    $a = 0;
    for (; $i < strlen($s); ++$i) {
        //pr^ := ps^ xor (Key);
        //Key := Key + (SeedA - SeedB) * 2 + SeedB;
        //pr := pointer(integer(pr) + 1);
        //ps := pointer(integer(ps) + 1);
        $a = ord($s[$i]) ^ ($Key);
        $result = $result . chr($a);

        $Key = $Key + ($SeedA - $SeedB) * 2 + $SeedB;
    }
    return $result;
}

function cmnEncryptString($Source, $Key) //对字符串加密(Source:源 Key:密匙)
{
    $KeyLen = strlen($Key);
    if ($KeyLen == 0) {
        $Key = 'delphi';
    }
    $KeyPos = 0;
    $MaxKey = 255;
    $Offset = rand(0, $MaxKey); // 99; //
    if ($Offset > 16) { //          Dest := format('%1.2x', [Offset]);
        $Dest = dechex($Offset);
    } else {
        $Dest = dechex($Offset) == "10" ? "10" : '0' . dechex($Offset);
    }
    $SrcPos = 0;
    for (; $SrcPos < strlen($Source); ++$SrcPos) {
        $SrcAsc = (Ord($Source[$SrcPos]) + $Offset) % 255;

        //echo decbin($SrcAsc).'|';
        //echo decbin(Ord($Key[$KeyPos])).'|';
        $SrcAsc = $SrcAsc ^ Ord($Key[$KeyPos]);
        if ($SrcAsc > 16) {
            $Dest = $Dest . dechex($SrcAsc); // format('%1.2x', [SrcAsc]);
        } else {
            $dechexVal = dechex($SrcAsc) == "10" ? "10" : '0' . dechex($SrcAsc);
            $Dest = $Dest . $dechexVal;
        }
        $Offset = $SrcAsc;

        $KeyPos = $KeyPos + 1;
        if ($KeyPos >= $KeyLen) {
            $KeyPos = 0;
        }
    }
    return strtoupper($Dest);
}

function hexToFile($hexstr, $file)
{
    if ($hexstr) {
        $data = pack('H*', $hexstr);
        file_put_contents($file, $data, true);
    }
}

function getAllUserStr()
{
    $DSCon = creatconniction("DS");
    if ($DSCon == -1) {
        write_log("{'getAppVisitLog':'DS创建数据库链接失败'}");
        exitErrorJson('创建数据库链接失败');
    }

    $getUserListSql = "select * from cuser where is_group=0 ";
    $result = mysql_query($getUserListSql, $DSCon);
    $rows = mysql_num_rows($result);
    if ($rows < 1) {
        write_log("{'getAllUserStr()':'未查询到符合条件的用户，getUserListSql:'.$getUserListSql}");
        exitErrorJson('查询用户集合：未查询到符合条件的用户');
    }

    $allUserStr = "";
    $i = 0;
    for (; $i < $rows; ++$i) {
        $row = mysql_fetch_row($result);
        $allUserStr = $allUserStr . "<{$row['0']}>";
    }
    return $allUserStr;
}

function getUserId_UserName_Info($accountStr, $UserID)
{
    $DSCon = creatconniction("DS");
    if ($DSCon == -1) {
        write_log("{'':'DS创建数据库链接失败'}");
        exitErrorJson('创建数据库链接失败');
    }
    if ($accountStr) {
        $getUserInfoSql = "SELECT user_id FROM cuser WHERE is_group=0 AND name='" . $accountStr . "'";
    } else {
        $getUserInfoSql = "SELECT name FROM cuser WHERE is_group=0 AND user_id='" . $UserID . "'";
    }
//    testLog('getUserInfoSql=' . $getUserInfoSql);
    $Result = mysql_query($getUserInfoSql, $DSCon);
    ($Rows = mysql_num_rows($Result));
    if ($Rows < 1) {
        write_log("{'getUserId_UserName_Info()':'未查询到符合条件的用户user_id，getUserInfoSql:'.$getUserInfoSql}");
        exitErrorJson('查询用户集合：未查询到符合条件的用户user_id');
    }
    $Row = mysql_fetch_row($Result);
    return $Row[0];
}

function getAdminUserId()
{
    $DSCon = creatconniction("DS");
    if ($DSCon == -1) {
        write_log("{'getAppVisitLog':'DS创建数据库链接失败'}");
        exitErrorJson('创建数据库链接失败');
    }
//    $getAdminUserIdSql = "SELECT user_id FROM cuser WHERE is_group=0 AND name='Admin' AND is_admin='1' ";
    $getAdminUserIdSql = "SELECT user_id FROM cuser WHERE is_group=0  AND is_admin='1' ";
//    testLog($getAdminUserIdSql);
    $result = mysql_query($getAdminUserIdSql, $DSCon);
    $rows = mysql_num_rows($result);
    if ($rows < 1) {
        write_log("{'getAllUserStr()':'未查询到符合条件的用户，getUserListSql:'.$getAdminUserIdSql}");
        exitErrorJson('查询用户集合：未查询到符合条件的用户');
    }
    $row = mysql_fetch_row($result);
    return $row[0];
}

function utf8ToGbk($str)
{
    return iconv("UTF-8", "gbk//IGNORE", $str);
}

function gbkToUtf8Encode($str)
{
    return urlencode(iconv("gbk", "utf-8//IGNORE", $str));
}

/*
　* 将字符串转换成二进制
　* @param type $str
　* @return type
　*/
function StrToBin($str)
{
    //1.列出每个字符
    $arr = preg_split('/(?<!^)(?!$)/u', $str);
    //2.unpack字符
    foreach ($arr as &$v) {
        $temp = unpack('H*', $v);
        $v = base_convert($temp[1], 16, 2);
        unset($temp);
    }
    return join(' ', $arr);
}

/**
 * 　* 讲二进制转换成字符串
 * 　* @param type $str
 * 　* @return type
 * 　*/
function BinToStr($str)
{
    $arr = explode(' ', $str);
    foreach ($arr as &$v) {
        $v = pack("H" . strlen(base_convert($v, 2, 16)), base_convert($v, 2, 16));
    }
    return join('', $arr);
}

/*
function hex2bin( $data )
{
    $len = strlen( $data );
    $newdata = "";
    $i = 0;
    for ( ;	$i < $len;	$i += 2	)
    {
        $newdata .= pack( "C", hexdec( substr( $data, $i, 2 ) ) );
        //echo $i."=".$newdata;
    }
    return $newdata;
}

//加密生成rap协议串
function acrypt( $s )
{
    $result = "";
    $SeedA = 10;
    $SeedB = 17;
    $Key = 7402;
    $i = 0;
    for ( ;	$i < strlen( $s );	++$i	)
    {
        $result = $result.chr( ord( $s[$i] ) ^ $Key );
        $Key = $Key + ( $SeedA - $SeedB ) * 2 + $SeedB;
    }
    return $result;
}
*/

//写入日志
function write_log($data)
{
    $WWWRoot = $_SERVER['DOCUMENT_ROOT'];
    $years = date('Y-m');
    $url = $WWWRoot . '/logs/' . $years . '/' . date("Ymd") . ".log";
    $dir_name = dirname($url);
    if (!file_exists($dir_name)) {
        mkdir($dir_name, 0777, true);
    }

    $fp = fopen($url, "a");
    fwrite($fp, date("Y-m-d H:i:s") . var_export($data, true) . "\r\n");
    fclose($fp);
}

function getglobalincLoop($Head)
{
    $DSCon = creatconniction("DS");
    if ($DSCon == -1) {
        write_log("{'getglobalincLoop':'DS创建数据库链接失败'}");
        exitErrorJson('创建数据库链接失败');
    }

    $getGlobalincSql = "select inc from gloabolinc where head='{$Head}'";
    $result = mysql_query($getGlobalincSql, $DSCon);
    $rows = mysql_num_rows($result);
    if ($rows < 1) {
        $insertGlobalincSql = "insert into gloabolinc (head) values ('{$Head}')";
        $result1 = mysql_query($insertGlobalincSql, $DSCon);
        if (!$result1) {
            write_log("{'getglobalincLoop':'添加globalinc失败,insertGlobalincSql：'.$insertGlobalincSql}");
            exitErrorJson("添加globalinc失败");
        }
        $index = 1;
    } else {
        $row = mysql_fetch_row($result);
        $row0 = $row['0'];
        $index = $row['0'] + 1;
    }

    //构建ID
    $format = sprintf("%%0%dd", 11 - strlen($Head));
    $ReturnValue = $Head . sprintf($format, $index);
    $updateGlobalincSql = "update gloabolinc set inc='{$index}',id='{$ReturnValue}' where head='{$Head}'";
    $result2 = mysql_query($updateGlobalincSql, $DSCon);
    if (!$result2) {
        write_log("{'getglobalincLoop':'更新globalinc失败,updateGlobalincSql：'.$updateGlobalincSql}");
        exitErrorJson("更新globalinc失败");
    }

    if ($Head == "usr") {
        $getUserSql = "select user_id from cuser where user_id='{$ReturnValue}'";
        $result = mysql_query($getUserSql, $DSCon);
        $rows = mysql_num_rows($result);
        if ($rows < 1) {
            return $ReturnValue;
        } else {
            return getglobalincLoop($Head);
        }
    } else if ($Head == "APP") {
        $getAppSql = "select app_id from application where app_id='{$ReturnValue}'";
        $result = mysql_query($getAppSql, $DSCon);
        $rows = mysql_num_rows($result);
        if ($rows < 1) {
            return $ReturnValue;
        } else {
            return getglobalincLoop($Head);
        }
    } else if ($Head == "ASr") {
        $getAppServerSql = "select Id from app_server where Id='{$ReturnValue}'";
        $result = mysql_query($getAppServerSql, $DSCon);
        $rows = mysql_num_rows($result);
        if ($rows < 1) {
            return $ReturnValue;
        } else {
            return getglobalincLoop($Head);
        }
    } else {
        return $ReturnValue;
    }
}

function getAdminGroupId()
{
    $DSCon = creatconniction("DS");
    if ($DSCon == -1) {
        write_log("{'getAdminGroupId':'DS创建数据库链接失败'}");
        exitErrorJson('创建数据库链接失败');
    }

    $result = mysql_query("select user_id from cuser where name='AdminGroup'", $DSCon);
    if (mysql_num_rows($result) < 1) {
        write_log("{'getAdminGroupId':'未查询到符合条件的用户组信息}");
        exitErrorJson('未查询到符合条件的用户');
    }
    $row = mysql_fetch_row($result);
    return $row['0'];
}

function do_get($url, $params)
{
    $url = "{$url}?" . http_build_query($params);

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_HEADER, 0);
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
    curl_setopt($ch, CURLOPT_TIMEOUT, 60);
    $result = curl_exec($ch);
    curl_close($ch);
    return $result;
}

function curl_get_https($url, $params)
{
    $url = "{$url}?" . http_build_query($params);
    $curl = curl_init(); // 启动一个CURL会话
    curl_setopt($curl, CURLOPT_URL, $url);
    curl_setopt($curl, CURLOPT_HEADER, 0);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false); // 跳过证书检查
    curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, true);  // 从证书中检查SSL加密算法是否存在
    $tmpInfo = curl_exec($curl);     //返回api的json对象
    //关闭URL请求
    curl_close($curl);
    return $tmpInfo;    //返回json对象
}

function isInArray($arr, $value)
{
    foreach ($arr as $serverId) {
        if ($value === $serverId) {
            return true;
        }
    }

    return false;
}

function testLog($content)
{
    $WWWRoot = $_SERVER['DOCUMENT_ROOT'];
    $years = date('Y-m');
    $url = $WWWRoot . '/logs/' . $years . "/c.log";
    if (!file_exists($url)) {
        mkdir($WWWRoot . '/logs/' . $years, "777", true);
    }
    file_put_contents($url, var_export($content, true) . "\r\n", FILE_APPEND);
}

function second_array_same_byKey($arr, $key, $ocn, $tempyArrCount)
{
    $tmp_arr = array();
    foreach ($arr as $k => $v) {

        if (in_array($v[$key], $tmp_arr))   //搜索$v[$key]是否在$tmp_arr数组中存在，若存在返回true
        {//testLog($arr[$k][$key]."--yes");
            $g = 1;
            $g += $g;
//            $arr[$k][$ocn] = $g;
            if (!$g == $tempyArrCount) {
                unset($arr[$k]);
            }
            //testLog($g.'--'.$v[$key]);
        } else {
            $tmp_arr[$k] = $v[$key];  //将不同的值放在该数组中保存
            unset($arr[$k]); //销毁一个变量  如果$tmp_arr中不存在相同的值就删除该值
//        testLog($tmp_arr[$k]."--no");
        }
    }
    return $arr;
}

function get_sameElement_byFrequencyOfOccurrenceInArr($arr, $tempyArrCount)
{
    $f = 0;
//    testLog(count($arr));
    for (; $f < count($arr); ++$f) {
        $arr[$f] = $arr[$f]['name'] . '-' . $arr[$f]['app_path'] . '-' . $arr[$f]['flag'] . '-' . $arr[$f]['icoico'] . '-' . $arr[$f]['bmp'] . '-' . $arr[$f]['ico'];
//        testLog($arr[$f]['name']);
    }
//    testLog($arr);
    $tmp = array();
    $tmpArr = array();
    $arr = array_count_values($arr);
    if (sizeof($arr) > 0) {
        foreach ($arr AS $k => $v) {
            if ($tempyArrCount == $v) {
                $tmp[] = $k;
            }
        }
    }
    if (count($tmp) > 0) {
        $d = 0;
        for (; $d < count($tmp); ++$d) {
            $Tmp = explode("-", $tmp[$d]);
            $tmpArr[$d]['name'] = $Tmp[0];
            $tmpArr[$d]['app_path'] = $Tmp[1];
            $tmpArr[$d]['flag'] = $Tmp[2];
            $tmpArr[$d]['icoico'] = $Tmp[3];
            $tmpArr[$d]['bmp'] = $Tmp[4];
            $tmpArr[$d]['ico'] = $Tmp[5];
        }
    }

    return $tmpArr;
}

function getServerIPNameList()
{
    $DSCon = creatconniction("DS");
    if ($DSCon == -1) {
        write_log("{'连接错误':'数据库创建链接失败'}");
        exitErrorJson('创建数据库链接失败');
    }
    $getServerIpListSql = "select server.ServerID, server.ComputerName, serverip.ip from server,serverip where server.ServerID=serverip.ServerId ";
//testLog($getServerIpListSql);
    $result = mysql_query($getServerIpListSql, $DSCon);
    $rows = mysql_num_rows($result);
    if ($rows < 1) {
        write_log("{'getServerIPNameList':'未查询到符合条件的服务器IP,ComputerName数据，$getServerIpListSql:'.$getServerIpListSql}");
//        exitErrorJson('未查询到符合条件的服务器IP,ComputerName数据');
    }

    $serverIpListArr = array();
    $i = 0;
    for (; $i < $rows; ++$i) {
        $row = mysql_fetch_row($result);
        $serverArr = array();
        $serverArr['serverId'] = $row['0'];
        $serverArr['serverName'] = $row['1'];
        $serverArr['serverIp'] = $row['2'];
        $serverIpListArr[$i] = $serverArr;
    }
//testLog($serverIpListArr);
    return $serverIpListArr;
}

function getServerSessionList()
{
    $DSCon = creatconniction("DC");
    if ($DSCon == -1) {
        write_log("{'连接错误':'数据库创建链接失败'}");
        exitErrorJson('创建数据库链接失败');
    }
    $getServerSessionListSql = "SELECT dc_sessionload.SessionID, dc_sessionload.UserID, dc_appinsession.AppId, dc_sessionload.ConnectState, dc_sessionload.NetSend, dc_sessionload.NetRecv, dc_sessionload.ClientName, dc_sessionload.ClientAddress, dc_sessionload.ClientHWareID, dc_sessionload.StartTime, count(1) AS num  FROM dc_sessionload,dc_appinsession WHERE dc_appinsession.id_sessionload=dc_sessionload.GlobeSessionId GROUP BY dc_sessionload.ClientAddress ORDER BY dc_appinsession.DcAppid ASC, dc_sessionload.SessionID ASC ";
    $result = mysql_query($getServerSessionListSql, $DSCon);
    $rows = mysql_num_rows($result);

    if ($rows < 1) {
        write_log("{'getServerSessionList':'未查询到符合条件的服务器Session数据,$getServerSessionListSql:'.$getServerSessionListSql}");//        exitErrorJson('未查询到符合条件的服务器Session数据');
    }
    $ConnectState = array("Logoff" => 0, "Logon" => 1);
    $sessionArr = array();
    $newArr = array();
    $serverSessionArr = array();
//----拼接成形如begin： $thidArr = array("192.168.0.121" => array("APP00000021", "APP00000023"), "192.168.0.41" => array("APP00000023", "APP00000021"));
    $getServerSessionListSqlTmp = "SELECT dc_sessionload.ClientAddress, dc_appinsession.AppId, dc_sessionload.ClientName FROM dc_sessionload,dc_appinsession WHERE dc_appinsession.id_sessionload=dc_sessionload.GlobeSessionId ORDER BY dc_appinsession.DcAppid ASC, dc_sessionload.SessionID ASC ";
    $resultTmp = mysql_query($getServerSessionListSqlTmp, $DSCon);
    $rowsTmp = mysql_num_rows($resultTmp);
//    testLog($rowsTmp);dc_appinsession.DcAppid ASC 顺序就是应用打开的顺序
    if ($rowsTmp < 1) {
        write_log("{'getServerSessionList':'未查询到符合条件的服务器Session数据,$getServerSessionListSql:'.$getServerSessionListSql}");//        exitErrorJson('未查询到符合条件的服务器Session数据');
    }
    $k = 0;
    $thidArr = array();
    $thirdTmpStr = "";
    if ($rowsTmp > 0) {
        for (; $k < $rowsTmp; ++$k) {
            $row = mysql_fetch_row($resultTmp);
            if (!$thirdTmpStr) {
                $thirdTmpStr = $row[0];
                $thidArr[$row[0]][$k] = $row[1];
            } else if ($row[0] && $thirdTmpStr && $thirdTmpStr == $row[0]) {
                $thidArr[$row[0]][$k] = $row[1];
                $thirdTmpStr = "";
            } else if ($row[0] && $thirdTmpStr && $thirdTmpStr != $row[0]) {
                $thirdTmpStr = $row[0];
                $thidArr[$row[0]][$k] = $row[1];
            }
        }
    }

//----拼接成形如end： $thidArr = array("192.168.0.121" => array("APP00000021", "APP00000023"), "192.168.0.41" => array("APP00000023", "APP00000021"));

    $i = 0;
    for (; $i < $rows; ++$i) {
        $row = mysql_fetch_row($result);
        $DCCon = creatconniction("DS");
        if ($DCCon == -1) {
            write_log("{'getServerResourceInfo':'DC创建数据库链接失败'}");
            exitErrorJson('创建数据库链接失败');
        }
        $selectUserAndApplicationSql = "SELECT cuser.name, cuser_application.app_name, cuser_application.time_audit FROM cuser,cuser_application WHERE cuser_application.user_id=cuser.user_id AND cuser.user_id='{$row['1']}' ORDER BY cuser_application.time_audit ASC";

        $userAndAppResult = mysql_query($selectUserAndApplicationSql, $DCCon);
        $userAndAppRow = mysql_num_rows($userAndAppResult);

        if ($userAndAppRow < 1) {
//            write_log("{'getServerSessionInfo':'未查询到符合条件的服务器session信息，selectUserAndApplicationSql:'.$selectUserAndApplicationSql}");
//            exitErrorJson('未查询到符合条件的服务器session信息');
            $selectUserAndApplicationSql2 = "SELECT cuser.name FROM cuser WHERE cuser.user_id='{$row['1']}' ";
            $userAndAppResult2 = mysql_query($selectUserAndApplicationSql2, $DCCon);
            $userAndAppRow2 = mysql_num_rows($userAndAppResult2);
        }
        if ($userAndAppRow > 0) {
            $j = 0;
            for (; $j < $userAndAppRow; ++$j) {
                $uarow = mysql_fetch_row($userAndAppResult);
//                $sessionArr['UserName'] = iconv("GBK", "UTF-8//IGNORE", $uarow['0']);
                $newArr[$j] = gbkToUtf8Encode($uarow[1]);
            }
        } else {
            $uarow = mysql_fetch_row($userAndAppResult2);
        }
        $sessionArr['UserName'] = gbkToUtf8Encode($uarow['0']);
        $sessionArr['dc_sessionload'] = $row['0'];
        $sessionArr['AppName'] = $newArr;
        $sessionArr['ConnectState'] = array_search($row['3'], $ConnectState);
        $sessionArr['NetSend'] = $row['4'];
        $sessionArr['NetRecv'] = $row['5'];
        $sessionArr['ClientName'] = $row['6'];
        $sessionArr['ClientAddress'] = $row['7'];
        $sessionArr['ClientHWareID'] = $row['8'];
        $sessionArr['StartTime'] = $row['9'];
        $sessionArr['SessionSum'] = $row['10'];
        $serverSessionArr[$i] = $sessionArr;
    }

    //----排列正确的appname顺序begin
    if (count($serverSessionArr) > 0 && sizeof($thidArr) > 0) {
        foreach ($serverSessionArr AS $k => $v) {
            if ($v['ClientAddress']) {
                foreach ($thidArr AS $tKey => $tVal) {
                    if ($v['ClientAddress'] == $tKey) {
                        $tVal = array_values($tVal);
                        $serverSessionArr[$k]['AppName'] = $tVal;
                        if (sizeof($tVal) > 0) {
                            $m = 0;
                            for (; $m < count($tVal); $m++) {
//                            testLog($tVal[$m]);
                                $DCCon = creatconniction("DS");
                                if ($DCCon == -1) {
                                    write_log("{'getServerResourceInfo':'DC创建数据库链接失败'}");
                                    exitErrorJson('创建数据库链接失败');
                                }
                                $selectApplicationSql = "SELECT application.name FROM application WHERE application.app_id='{$tVal[$m]}' ";
//                            testLog($selectApplicationSql);
                                $appResult = mysql_query($selectApplicationSql, $DCCon);
                                $AppRow = mysql_num_rows($appResult);
                                if ($AppRow < 1) {
                                    write_log("{'getServerSessionInfo':'未查询到符合条件的应用application信息，$selectApplicationSql:'.$selectApplicationSql}");
                                }
                                $n = 0;
                                for (; $n < $AppRow; $n++) {
                                    $appRow = mysql_fetch_row($appResult);

                                    $tVal[$m] = iconv("GBK", "UTF-8//IGNORE", $appRow['0']);
                                }
                                $serverSessionArr[$k]['AppName'] = $tVal;
                            }
                        }
                    }
                }
            }
        }
    }
//    testLog($serverSessionArr);
    //----排列正确的appname顺序  end
    return $serverSessionArr;
}

function getOpenServerPermitNumber()
{
    $openServerPermitNumberArr = array();
    $DSCon = creatconniction("DC");
    if ($DSCon == -1) {
        write_log("{'连接错误':'数据库创建链接失败'}");
        exitErrorJson('创建数据库链接失败');
    }
    $getServerSessionListSql = "SELECT dc_sessionload.ServerID   FROM dc_sessionload,dc_appinsession WHERE dc_appinsession.id_sessionload=dc_sessionload.GlobeSessionId AND dc_sessionload.ConnectState=1 GROUP BY dc_sessionload.ClientAddress ORDER BY dc_appinsession.DcAppid ASC, dc_sessionload.SessionID ASC ";
    $result = mysql_query($getServerSessionListSql, $DSCon);
    $rows = mysql_num_rows($result);
    if ($rows < 1) {
        write_log("{'getServerSessionList':'未查询到符合条件的服务器Session数据,$getServerSessionListSql:'.$getServerSessionListSql}");//        exitErrorJson('未查询到符合条件的服务器Session数据');
    }
    $ServerIpArr = array();
    $i = 0;
    for (; $i < $rows; ++$i) {
        $row = mysql_fetch_row($result);
//        $DCCon = creatconniction("DS");
//        if ($DCCon == -1) {
//            write_log("{'getServerResourceInfo':'DC创建数据库链接失败'}");
//            exitErrorJson('创建数据库链接失败');
//        }
//        $getServerIpListSql = "SELECT serverip.ServerId  FROM serverip,server WHERE server.ServerID=serverip.ServerId ";
//        $serverIpListResult = mysql_query($getServerIpListSql, $DSCon);
//        $serverIpRows = mysql_num_rows($serverIpListResult);
//        if (sizeof($serverIpRows) > 0) {
//            $j = 0;
//            for (; $j < count($serverIpRows); ++$j) {
//                $serverIpRow = mysql_fetch_row($serverIpListResult);
//
//            }
//        }
        $ServerIpArr[$i] = $row[0];
    }
    $ServerIpArr = array_count_values($ServerIpArr);
    return $ServerIpArr;
}

function judgeAndSameListCommon($adminName, $adminPwd, $DSCon, $keyVal)
{
//    $WWWRoot = $_SERVER['DOCUMENT_ROOT'];
//    $hostIp = getfarminfofromdb("LicenseServerURL");
//    $hostIp = explode("//", $hostIp);
////    testLog('hostIp='.$hostIp);
//    if (!isset($hostIp) || empty($hostIp)) {
//        write_log("{'judgeApplicationListWhetherEqual':'未获取到主服务器IP，$hostIp:'.$hostIp}");
//        exitErrorJson('未获取到主服务器IP');
//    }
//    exec('start software.exe software');
//    $filePaths = $WWWRoot . "/software.txt";
//    if (!file_exists($filePaths)) {
//        write_log("{'getAppPathLists':'获取应用程序路径列表失败：'.$filePaths}");
//        exitErrorJson("获取应用程序路径列表失败！");
//    }
//    $greenFileName = $WWWRoot . '/appList/appList.txt';//绿色应用文件列表
//    $position = strrpos($greenFileName, '/');
////    testLog($position);
//    $path = substr($greenFileName, 0, $position);
////    testLog($path);
//    if (!file_exists($greenFileName)) {
//        mkdir($path, 0777, true);
//        $openFile = fopen("appList/appList.txt", "a+");
//        if ($openFile) {
//            $content = $interfaceArr = parse_ini_file($WWWRoot . "/interface.ini", TRUE);
////            testLog($content["About"]["pageTip"]);
//            file_put_contents($greenFileName, var_export($content["About"]["pageTip"], true) . "\r\n", FILE_APPEND);
//            fclose($openFile);
//        } else {
//            write_log("{'judgeAndSameListCommon':'Unable to open file!：'.$greenFileName}");
//            exitErrorJson("Unable to open file $greenFileName!");
//        }
//    }
//    $file_arr = file($WWWRoot . "/software.txt");
////    testLog($file_arr);
//    $greenArrLists = file($WWWRoot . '/appList/appList.txt');
////    testLog($greenArrLists);
//    if ($file_arr && $greenArrLists) {
//        $file_arr = array_merge($file_arr, $greenArrLists);
//    }
//    testLog($file_arr);
//    $pathListArr = array();
//    $i = 0;
//    for (; $i < count($file_arr); $i++) {
////        testLog($file_arr[$i]);
//        $file_arr[$i] = str_replace("\r\n", "", $file_arr[$i]);
////        testLog($file_arr[$i]=str_replace("\r\n","",$file_arr[$i]));
//        $pieces = explode("\\", $file_arr[$i]);
////        testLog(end($pieces));
//        if (end($pieces)) {
//            $pieces1 = explode(".", end($pieces));
////            testLog(in_array("exe", $pieces1));
//            if (!in_array("Uninstall", $pieces1) && in_array("exe", $pieces1) && $pieces1[0]) {
////              testLog($pieces1[0]);
//                $pathListArr[$i] = str_replace("\\", "/", $file_arr[$i]);
//
//            }
//        }
//    }
//    $pathListArr = array_values($pathListArr);
//    testLog($pathListArr);
    $getApplicationListSql = '';
    $getApplicationListSql .= "select serverip.ip, server.WebPort, server.ServerID from server,serverip where  server.ServerID=serverip.ServerId ";
//    if ($hostIp[1]) {
//        $getApplicationListSql .= " AND serverip.ip !='" . $hostIp[1] . "'";
//    }
//    testLog($getApplicationListSql);
    $result = mysql_query($getApplicationListSql, $DSCon);
    $rows = mysql_num_rows($result);
    if ($rows < 1) {
        write_log("{'judgeApplicationListWhetherEqual':'未查询到符合条件的服务器IP、端口数据，$getApplicationListSql:'.$getApplicationListSql}");
        exitErrorJson('未查询到符合条件的服务器IP、端口数据');
    }
    $serverApplicationListArr = array();
    $i = 0;
    for (; $i < $rows; ++$i) {
        $row = mysql_fetch_row($result);
        $serverArr = array();
        $serverArr['serverIp'] = $row['0'];
        $serverArr['WebPort'] = $row['1'];
        $serverApplicationListArr[$i] = $serverArr;
    }
    $ApplicationListArr = array();
    $tempyArr = array();
    if (isset($serverApplicationListArr) && !empty($serverApplicationListArr)) {
        $output = "";
        foreach ($serverApplicationListArr AS $k => $v) {
            $initParamsTemp = "command_getAppPathLists__user_" . $adminName . "__pwd_" . $adminPwd;
//            testLog('keyVal='.$keyVal);
//            testLog('initParamsTempkeyVal='.$initParamsTemp . $keyVal);
            $signTemp = md5($initParamsTemp . $keyVal);
            $key = "wusuokey";
            $URL = "http://" . $serverApplicationListArr[$k]['serverIp'] . ':' . $serverApplicationListArr[$k]['WebPort'] . "/ConsoleExternalApi.XGI?initParams=" . $initParamsTemp . "&key=" . $key . "&sign=" . $signTemp;
            //初始化
            $ch = curl_init();
            //设置选项，包括URL
            curl_setopt($ch, CURLOPT_URL, $URL);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); //设置curl_exec()获取的信息以文件流的形式返回，而不是直接输出。
            curl_setopt($ch, CURLOPT_HEADER, 0);  //设置是否返回http头信息
            //执行并获取HTML文档内容
            $output .= "+" . curl_exec($ch);
            //释放curl句柄
            curl_close($ch);
//            testLog($output);
            $result1 = array();
            $result2 = array();
            $result1 = explode("+", $output);
//            testLog($result1);
            if (count($result1) > 0) {
//                testLog(count($result1));
                $q = 0;
                for (; $q < count($result1); ++$q) {
                    if ($result1[$q]) {
                        $result2[$q] = $result1[$q];
                    }
                }
            }
            $ApplicationListArr[$k] = $result2;
        }

        $tempyArr = end($ApplicationListArr);
        $tempyArr = array_values($tempyArr);
//        testLog($tempyArr);
    }
    $ApplicationListSameArrNew = array();
    $ApplicationListArrNew = array();
    $tempyArrCount = count($tempyArr);
    if (sizeof($tempyArr) > 0) {
//testLog($tempyArr);
        $result3 = array();
        $c = 0;
        $w = 0;
        for (; $w < $tempyArrCount; ++$w) {
            $result3 = json_decode($tempyArr[$w], true);
//            testLog(sizeof($result3['pathListArr']));
            if ($result3['result'] == '1' && sizeof($result3['pathListArr']) > 0) {
                $r = 0;
//                testLog($result3['pathListArr']);
//                testLog(count($result3['pathListArr']));
                for (; $r < count($result3['pathListArr']); ++$r) {
//                    testLog($result3['pathListArr'][$r]['app_path']);
//                    if (isset($pathListArr) && !empty($pathListArr)) {
//                        testLog($pathListArr);
//                        ($ApplicationListArrTmpNew[$w] = $result3['pathListArr']);
//                        if (in_array($result3['pathListArr'][$r]['app_path'], $pathListArr)) {
//                            testLog(in_array($result3['pathListArr'][$r]['app_path'], $pathListArr));
//                            testLog($result3['pathListArr'][$r]);
//                            unset($result3['pathListArr'][$r]);
                    ($ApplicationListSameArrNew[$w][] = $result3['pathListArr'][$r]);


//                        }
//                    }
                }
//                testLog('serverApplicationListArr[k][serverIp]=' . count($result3['pathListArr']) . '-----bendi=' . sizeof($pathListArr) . '---cj=' . (count($result3['pathListArr']) * sizeof($pathListArr)) . '----ccccss=' . $c);
//                if ((count($result3['pathListArr']) * sizeof($pathListArr)) == $c) {
//                    testLog("not");
//                    write_log("{'getServerList':'主副服务器应用程序列表不一致次数，c='.$c}");
//                    exitErrorJson('主副服务器应用程序列表不一致，请按服务器发布方式发布应用');
//                }
            }
        }


    }


//    testLog(sizeof($ApplicationListSameArrNew));
    if (sizeof($ApplicationListSameArrNew) > 0) {
        $u = 0;
        for (; $u < count($ApplicationListSameArrNew); ++$u) {
//            testLog(($ApplicationListSameArrNew[$u]));
            if (sizeof($ApplicationListSameArrNew[$u]) > 0) {
                $o = 0;
                for (; $o < count($ApplicationListSameArrNew[$u]); ++$o) {
                    (($ApplicationListArrNew[] = $ApplicationListSameArrNew[$u][$o]));
                }

            }
//            testLog($u);
        }
    }
//    testLog('tempyArrCount='.$tempyArrCount);
//    testLog($ApplicationListArrNew);
//    testLog(get_sameElement_byFrequencyOfOccurrenceInArr($ApplicationListArrNew, $tempyArrCount));
    $ApplicationListArrNew = get_sameElement_byFrequencyOfOccurrenceInArr($ApplicationListArrNew, $tempyArrCount);
//    $key = 'name';
//    $ocn = 'occNumber';
//    $ApplicationListArrNew = second_array_same_byKey($ApplicationListArrNew, $key, $ocn, $tempyArrCount);
////    testLog($ApplicationListArrNew);
//    $ApplicationListArrNew = array_values($ApplicationListArrNew);
////    testLog($ApplicationListArrNew);
////    testLog(count($ApplicationListArrNew));
    return $ApplicationListArrNew;
}

function formatSameArray($array, $para1, $para2)//去除二维数组中相同的项(元素)
{
    sort($array);
    $tem = "";
    $temarray = array();
    $j = 0;
    for ($i = 0; $i < count($array); $i++) {
        if ($array[$i][$para1] != $tem) {
            $temarray[$j][$para1] = $array[$i][$para1];
            $temarray[$j][$para2] = $array[$i][$para2];
            $j++;
        }
        $tem = $array[$i][$para1];
    }
    return $temarray;
}

